import{_ as t,o as e,c as o,U as a}from"./chunks/framework.9adb0f96.js";const n="/blog/assets/image-20230825160142328.3922fafd.png",_=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"article/vueComponent/monorepo.md","filePath":"article/vueComponent/monorepo.md","lastUpdated":1692955225000}'),l={name:"article/vueComponent/monorepo.md"},s=a(`<h2 id="什么是-monorepo-单仓库多模块" tabindex="-1">什么是 Monorepo（单仓库多模块） <a class="header-anchor" href="#什么是-monorepo-单仓库多模块" aria-label="Permalink to &quot;什么是 Monorepo（单仓库多模块）&quot;">​</a></h2><p>Monorepo 是一种项目代码管理方式，指单个仓库中管理多个项目，有助于简化代码共享、版本控制、构建和部署等方面的复杂性，并提供更好的可重用性和协作性。Monorepo 提倡了开放、透明、共享的组织文化，这种方法已经被很多大型公司广泛使用，如 Google、Facebook 和 Microsoft。</p><h2 id="与-multirepo-多仓库多模块-对比" tabindex="-1">与 MultiRepo(多仓库多模块)对比 <a class="header-anchor" href="#与-multirepo-多仓库多模块-对比" aria-label="Permalink to &quot;与 MultiRepo(多仓库多模块)对比&quot;">​</a></h2><table><thead><tr><th><strong>场景</strong></th><th><strong>MultiRepo</strong></th><th><strong>MonoRepo</strong></th></tr></thead><tbody><tr><td>代码可见性</td><td>✅ 代码隔离，研发者只需关注自己负责的仓库<br>❌ 包管理按照各自owner划分，当出现问题时，需要到依赖包中进行判断并解决。</td><td>✅ 一个仓库中多个相关项目，很容易看到整个代码库的变化趋势，更好的团队协作。<br>❌ 增加了非owner改动代码的风险</td></tr><tr><td>依赖管理</td><td>❌ 多个仓库都有自己的 node_modules，存在依赖重复安装情况，占用磁盘内存大。</td><td>✅ 多项目代码都在一个仓库中，相同版本依赖提升到顶层只安装一次，节省磁盘内存，</td></tr><tr><td>代码权限</td><td>✅ 各项目单独仓库，不会出现代码被误改的情况，单个项目出现问题不会影响其他项目。</td><td>❌ 多个项目代码都在一个仓库中，没有项目粒度的权限管控，一个项目出问题，可能影响所有项目。</td></tr><tr><td>开发迭代</td><td>✅ 仓库体积小，模块划分清晰，可维护性强。<br>❌ 多仓库来回切换（编辑器及命令行），项目多的话效率很低。多仓库见存在依赖时，需要手动 <code>npm link</code>，操作繁琐。<br>❌ 依赖管理不便，多个依赖可能在多个仓库中存在不同版本，重复安装，npm link 时不同项目的依赖会存在冲突。</td><td>✅ 多个项目都在一个仓库中，可看到相关项目全貌，编码非常方便。<br>✅ 代码复用高，方便进行代码重构。<br>❌ 多项目在一个仓库中，代码体积多大几个 G，<code>git clone</code>时间较长。<br>✅ 依赖调试方便，依赖包迭代场景下，借助工具自动 npm link，直接使用最新版本依赖，简化了操作流程。</td></tr><tr><td>工程配置</td><td>❌ 各项目构建、打包、代码校验都各自维护，不一致时会导致代码差异或构建差异。</td><td>✅ 多项目在一个仓库，工程配置一致，代码质量标准及风格也很容易一致。</td></tr><tr><td>构建部署</td><td>❌ 多个项目间存在依赖，部署时需要手动到不同的仓库根据先后顺序去修改版本及进行部署，操作繁琐效率低。</td><td>✅ 构建性 Monorepo 工具可以配置依赖项目的构建优先级，可以实现一次命令完成所有的部署。</td></tr></tbody></table><h2 id="为什么用pnpm" tabindex="-1">为什么用pnpm <a class="header-anchor" href="#为什么用pnpm" aria-label="Permalink to &quot;为什么用pnpm&quot;">​</a></h2><ul><li>磁盘空间的节省：相同的文件只会存储一次，避免了冗余的存储，尤其是在多个项目共享依赖项时</li><li>快速的依赖项安装：由于文件已经存在于 store 中，所以安装依赖项时可以直接使用已有的文件，而无需下载和解压，从而提高了安装速度 <ul><li>npm3 之前是嵌套结构，npm3 之后是扁平结构</li><li>嵌套结构的问题 <ul><li>安装时间延长</li><li>重复安装包,磁盘空间占用</li><li>冗余的依赖项</li></ul></li><li>扁平结构问题 <ul><li>依赖结构的不确定性（不同包依赖某个包的不同版本 最终安装的版本具有不确定性）可通过lock文件确定安装版本</li><li>扁平化算法复杂，耗时</li><li>非法访问未声明的包(幽灵依赖)</li></ul></li></ul></li><li>支持 monorepo</li></ul><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm i pnpm -g // 全局安装pnpm</span></span>
<span class="line"><span style="color:#A6ACCD;">pnpm init // 初始化package.json配置⽂件 私有库</span></span>
<span class="line"><span style="color:#A6ACCD;">pnpm install vue typescript // 全局下添加依赖</span></span></code></pre></div><p>只有package.json 中依赖声明了的vue与typescript会在node_modules的根目录下，其余的在 .pnpm目录下。</p><p><img src="`+n+'" alt="image-20230825160142328"></p><p>使⽤pnpm必须要建⽴.npmrc⽂件，shamefully-hoist = true，否则安装的模块⽆法放置到node_modules⽬录下</p><p><strong>.npmrc</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">shamefully-hoist = true</span></span></code></pre></div><p><strong>安装子模块到根目录</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">pnpm install @××× -w</span></span></code></pre></div>',15),p=[s];function r(i,d,c,m,h,u){return e(),o("div",null,p)}const b=t(l,[["render",r]]);export{_ as __pageData,b as default};
