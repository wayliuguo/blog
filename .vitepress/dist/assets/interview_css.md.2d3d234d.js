import{_ as s,o as a,c as n,U as l}from"./chunks/framework.9adb0f96.js";const e="/blog/css/image-20220820234005694.png",o="/blog/css/1603966605254-fe880ec0-ebd1-4f94-b662-cdd5e5396c34.png",t="/blog/css/1615998119364-e2b81466-ba5b-4eb8-af5f-61c5621bb0af.jpeg",p="/blog/css/image-20221013194441922.png",i="/blog/css/image-20221013194510155.png",c="/blog/css/image-20221013195454825.png",x=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/css.md","filePath":"interview/css.md","lastUpdated":1690176332000}'),r={name:"interview/css.md"},d=l('<h2 id="_1-css-选择器及优先级" tabindex="-1">1. css 选择器及优先级 <a class="header-anchor" href="#_1-css-选择器及优先级" aria-label="Permalink to &quot;1. css 选择器及优先级&quot;">​</a></h2><p><img src="'+e+'" alt="image-20220820234005694"></p><ul><li>标签选择器、伪元素选择器：1；</li><li>类选择器、伪类选择器、属性选择器：10；</li><li>id 选择器：100；</li><li>内联样式：1000；</li></ul><h2 id="_2-display的block、inline、inline-blick" tabindex="-1">2.display的block、inline、inline-blick <a class="header-anchor" href="#_2-display的block、inline、inline-blick" aria-label="Permalink to &quot;2.display的block、inline、inline-blick&quot;">​</a></h2><ul><li>**block：**会独占一行，多个元素会另起一行，可以设置width、height</li><li>**inline：**元素不会独占一行，设置width、height属性无效。</li><li>**inline-block：**元素不会独占一行，可设置width、height。</li></ul><h2 id="_3-隐藏元素的方法有哪些" tabindex="-1">3.隐藏元素的方法有哪些？ <a class="header-anchor" href="#_3-隐藏元素的方法有哪些" aria-label="Permalink to &quot;3.隐藏元素的方法有哪些？&quot;">​</a></h2><ul><li><strong>display: none</strong>：渲染树不会包含该渲染对象，因此该元素不会在页面中占据位置，也不会响应绑定的监听事件。</li><li><strong>visibility: hidden</strong>：元素在页面中仍占据空间，但是不会响应绑定的监听事件。</li><li><strong>opacity: 0</strong>：将元素的透明度设置为 0，以此来实现元素的隐藏。元素在页面中仍然占据空间，并且能够响应元素绑定的监听事件。</li><li><strong>position: absolute</strong>：通过使用绝对定位将元素移除可视区域内，以此来实现元素的隐藏。</li><li><strong>z-index: 负值</strong>：来使其他元素遮盖住该元素，以此来实现隐藏。</li><li><strong>clip/clip-path</strong> ：使用元素裁剪的方法来实现元素的隐藏，这种方法下，元素仍在页面中占据位置，但是不会响应绑定的监听事件。</li><li><strong>transform: scale(0,0)</strong>：将元素缩放为 0，来实现元素的隐藏。这种方法下，元素仍在页面中占据位置，但是不会响应绑定的监听事件。</li></ul><h2 id="_4-对盒模型的理解" tabindex="-1">4.对盒模型的理解 <a class="header-anchor" href="#_4-对盒模型的理解" aria-label="Permalink to &quot;4.对盒模型的理解&quot;">​</a></h2><p>盒模型都是由四个部分组成的，分别是margin、border、padding和content。</p><p>标准盒模型和IE盒模型的区别在于设置width和height时，所对应的范围不同：</p><ul><li>标准盒模型的width和height属性的范围只包含了content，</li><li>IE盒模型的width和height属性的范围包含了border、padding和content。</li></ul><p>可以通过修改元素的box-sizing属性来改变元素的盒模型：</p><ul><li><code>box-sizing: content-box</code>表示标准盒模型（默认值）</li><li><code>box-sizing: border-box</code>表示IE盒模型（怪异盒模型）</li></ul><h2 id="_5-为什么有时候用translate来改变位置而不是定位" tabindex="-1">5.为什么有时候⽤<strong>translate</strong>来改变位置⽽不是定位？ <a class="header-anchor" href="#_5-为什么有时候用translate来改变位置而不是定位" aria-label="Permalink to &quot;5.为什么有时候⽤**translate**来改变位置⽽不是定位？&quot;">​</a></h2><ul><li>改变transform或opacity不会触发浏览器重新布局（reflow）或重绘（repaint），只会触发复合（compositions）。⽽改变绝对定位会触发重新布局，进⽽触发重绘和复合。</li><li>transform使浏览器为元素创建⼀个 GPU 图层，但改变绝对定位会使⽤到 CPU。 因此translate()更⾼效，可以缩短平滑动画的绘制时间。</li></ul><h2 id="_6-什么是物理像素-逻辑像素和像素密度-为什么在移动端开发时需要用到-3x-2x这种图片" tabindex="-1">6.什么是物理像素，逻辑像素和像素密度，为什么在移动端开发时需要用到@3x, @2x这种图片？ <a class="header-anchor" href="#_6-什么是物理像素-逻辑像素和像素密度-为什么在移动端开发时需要用到-3x-2x这种图片" aria-label="Permalink to &quot;6.什么是物理像素，逻辑像素和像素密度，为什么在移动端开发时需要用到@3x, @2x这种图片？&quot;">​</a></h2><ul><li>物理像素，手机一造出来就已经确定，如inphone5的物理像素为640x1136px</li><li>逻辑像素，即设备像素，可以通过 window.screen.width/ window.screen.height 查看，iphone5逻辑像素为320px568px</li><li>640px/320px = 2 ,即像素密度为2</li><li>对于图片来说，为了保证其不失真，1 个图片像素至少要对应一个物理像素，假如原始图片是 500300 像素，那么在 3 倍屏上就要放一个 1500900 像素的图片才能保证 1 个物理像素至少对应一个图片像素，才能不失真。</li></ul><h2 id="_7-如何判断元素是否到达可是区域" tabindex="-1">7. 如何判断元素是否到达可是区域 <a class="header-anchor" href="#_7-如何判断元素是否到达可是区域" aria-label="Permalink to &quot;7. 如何判断元素是否到达可是区域&quot;">​</a></h2><ul><li><code>window.innerHeight</code> 是浏览器可视区的高度；</li><li><code>document.body.scrollTop || document.documentElement.scrollTop</code> 是浏览器滚动的过的距离；</li><li><code>imgs.offsetTop</code> 是元素顶部距离文档顶部的高度（包括滚动条的距离）；</li><li>内容达到显示区域的：<code>img.offsetTop &lt; window.innerHeight + document.body.scrollTop;</code></li></ul><p><img src="'+o+`" alt="img"></p><h2 id="_8-常见的css布局单位" tabindex="-1">8.常见的css布局单位 <a class="header-anchor" href="#_8-常见的css布局单位" aria-label="Permalink to &quot;8.常见的css布局单位&quot;">​</a></h2><ul><li>像素</li><li>百分比</li><li>em和rem</li><li>vw/vh</li></ul><p><strong>vw/vh</strong> 和百分比很类似，两者的区别：</p><ul><li>百分比（<code>%</code>）：大部分相对于祖先元素，也有相对于自身的情况比如（border-radius、translate等)</li><li>vw/vm：相对于视窗的尺寸</li></ul><h2 id="_9-对bfc的理解-如何创建bfc" tabindex="-1">9.对BFC的理解，如何创建BFC <a class="header-anchor" href="#_9-对bfc的理解-如何创建bfc" aria-label="Permalink to &quot;9.对BFC的理解，如何创建BFC&quot;">​</a></h2><p>BFC是一个独立的布局环境，可以理解为一个容器，在这个容器中按照一定规则进行物品摆放，并且不会影响其它环境中的物品。如果一个元素符合触发BFC的条件，则BFC中的元素布局不受外部影响。</p><p><strong>创建BFC的条件：</strong></p><ul><li>根元素：body；</li><li>元素设置浮动：float 除 none 以外的值；</li><li>元素设置绝对定位：position (absolute、fixed)；</li><li>display 值为：inline-block、table-cell、table-caption、flex等；</li><li>overflow 值为：hidden、auto、scroll；</li></ul><p><strong>BFC的特点：</strong></p><ul><li>垂直方向上，自上而下排列，和文档流的排列方式一致。</li><li>在BFC中上下相邻的两个容器的margin会重叠</li><li>计算BFC的高度时，需要计算浮动元素的高度</li><li>BFC区域不会与浮动的容器发生重叠</li><li>BFC是独立的容器，容器内部元素不会影响外部元素</li><li>每个元素的左margin值和容器的左border相接触</li></ul><p><strong>BFC的作用：</strong></p><ul><li><strong>解决margin的重叠问题</strong>：由于BFC是一个独立的区域，内部的元素和外部的元素互不影响，将两个元素变为两个BFC，就解决了margin重叠的问题。</li><li><strong>解决高度塌陷的问题</strong>：在对子元素设置浮动后，父元素会发生高度塌陷，也就是父元素的高度变为0。解决这个问题，只需要把父元素变成一个BFC。常用的办法是给父元素设置<code>overflow:hidden</code>。</li><li><strong>创建自适应两栏布局</strong>：可以用来创建自适应两栏布局：左边的宽度固定，右边的宽度自适应。</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">.left{</span></span>
<span class="line"><span style="color:#A6ACCD;">     width: 100px;</span></span>
<span class="line"><span style="color:#A6ACCD;">     height: 200px;</span></span>
<span class="line"><span style="color:#A6ACCD;">     background: red;</span></span>
<span class="line"><span style="color:#A6ACCD;">     float: left;</span></span>
<span class="line"><span style="color:#A6ACCD;"> }</span></span>
<span class="line"><span style="color:#A6ACCD;"> .right{</span></span>
<span class="line"><span style="color:#A6ACCD;">     height: 300px;</span></span>
<span class="line"><span style="color:#A6ACCD;">     background: blue;</span></span>
<span class="line"><span style="color:#A6ACCD;">     overflow: hidden;</span></span>
<span class="line"><span style="color:#A6ACCD;"> }</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;div class=&quot;right&quot;&gt;&lt;/div&gt;</span></span></code></pre></div><p>左侧设置<code>float:left</code>，右侧设置<code>overflow: hidden</code>。这样右边就触发了BFC，BFC的区域不会与浮动元素发生重叠，所以两侧就不会发生重叠，实现了自适应两栏布局。</p><h2 id="_10-position的属性有哪些-区别是什么" tabindex="-1">10.position的属性有哪些，区别是什么 <a class="header-anchor" href="#_10-position的属性有哪些-区别是什么" aria-label="Permalink to &quot;10.position的属性有哪些，区别是什么&quot;">​</a></h2><table><thead><tr><th>属性值</th><th>概述</th></tr></thead><tbody><tr><td>absolute</td><td>生成绝对定位的元素，相对于static定位以外的一个父元素进行定位。元素的位置通过left、top、right、bottom属性进行规定。</td></tr><tr><td>relative</td><td>生成相对定位的元素，相对于其原来的位置进行定位。元素的位置通过left、top、right、bottom属性进行规定。</td></tr><tr><td>fixed</td><td>生成绝对定位的元素，指定元素相对于屏幕视⼝（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变，⽐如回到顶部的按钮⼀般都是⽤此定位⽅式。</td></tr><tr><td>static</td><td>默认值，没有定位，元素出现在正常的文档流中，会忽略 top, bottom, left, right 或者 z-index 声明，块级元素从上往下纵向排布，⾏级元素从左向右排列。</td></tr><tr><td>inherit</td><td>规定从父元素继承position属性的值</td></tr></tbody></table><h2 id="_11-如何解决-1px-问题" tabindex="-1">11.如何解决 1px 问题 <a class="header-anchor" href="#_11-如何解决-1px-问题" aria-label="Permalink to &quot;11.如何解决 1px 问题&quot;">​</a></h2><p>px 问题指的是：在一些 <code>Retina屏幕</code> 的机型上，移动端页面的 1px 会变得很粗，呈现出不止 1px 的效果。原因很简单——CSS 中的 1px 并不能和移动设备上的 1px 划等号。它们之间的比例关系有一个专门的属性来描述：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">window.devicePixelRatio = 设备的物理像素 / CSS像素。</span></span></code></pre></div><p>打开 Chrome 浏览器，启动移动端调试模式，在控制台去输出这个 <code>devicePixelRatio</code> 的值。这里选中 iPhone6/7/8 这系列的机型，输出的结果就是2：</p><p><img src="`+t+`" alt="img"></p><p>这就意味着设置的 1px CSS 像素，在这个设备上实际会用 2 个物理像素单元来进行渲染，所以实际看到的一定会比 1px 粗一些。</p><p><strong>解决****1px 问题的三种思路：</strong></p><h4 id="思路一-直接写-0-5px" tabindex="-1">思路一：直接写 0.5px <a class="header-anchor" href="#思路一-直接写-0-5px" aria-label="Permalink to &quot;思路一：直接写 0.5px&quot;">​</a></h4><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;div id=&quot;container&quot; data-device={{window.devicePixelRatio}}&gt;&lt;/div&gt;</span></span></code></pre></div><p>然后就可以在 CSS 中用属性选择器来命中 devicePixelRatio 为某一值的情况，比如说这里尝试命中 devicePixelRatio 为2的情况：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">#container[data-device=&quot;2&quot;] {</span></span>
<span class="line"><span style="color:#A6ACCD;">  border:0.5px solid #333</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><h4 id="思路二-伪元素先放大后缩小" tabindex="-1">思路二：伪元素先放大后缩小 <a class="header-anchor" href="#思路二-伪元素先放大后缩小" aria-label="Permalink to &quot;思路二：伪元素先放大后缩小&quot;">​</a></h4><p>思路是<strong>先放大、后缩小：在目标元素的后面追加一个 ::after 伪元素，让这个元素布局为 absolute 之后、整个伸展开铺在目标元素上，然后把它的宽和高都设置为目标元素的两倍，border值设为 1px。接着借助 CSS 动画特效中的放缩能力，把整个伪元素缩小为原来的 50%。此时，伪元素的宽高刚好可以和原有的目标元素对齐，而 border 也缩小为了 1px 的二分之一，间接地实现了 0.5px 的效果。</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">#container[data-device=&quot;2&quot;] {</span></span>
<span class="line"><span style="color:#A6ACCD;">    position: relative;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">#container[data-device=&quot;2&quot;]::after{</span></span>
<span class="line"><span style="color:#A6ACCD;">      position:absolute;</span></span>
<span class="line"><span style="color:#A6ACCD;">      top: 0;</span></span>
<span class="line"><span style="color:#A6ACCD;">      left: 0;</span></span>
<span class="line"><span style="color:#A6ACCD;">      width: 200%;</span></span>
<span class="line"><span style="color:#A6ACCD;">      height: 200%;</span></span>
<span class="line"><span style="color:#A6ACCD;">      content:&quot;&quot;;</span></span>
<span class="line"><span style="color:#A6ACCD;">      transform: scale(0.5);</span></span>
<span class="line"><span style="color:#A6ACCD;">      transform-origin: left top;</span></span>
<span class="line"><span style="color:#A6ACCD;">      box-sizing: border-box;</span></span>
<span class="line"><span style="color:#A6ACCD;">      border: 1px solid #333;</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><h4 id="思路三-viewport-缩放来解决" tabindex="-1">思路三：viewport 缩放来解决 <a class="header-anchor" href="#思路三-viewport-缩放来解决" aria-label="Permalink to &quot;思路三：viewport 缩放来解决&quot;">​</a></h4><p>这个思路就是对 meta 标签里几个关键属性下手：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">viewport</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">content</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">initial-scale=0.5, maximum-scale=0.5, minimum-scale=0.5, user-scalable=no</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>这里针对像素比为2的页面，把整个页面缩放为了原来的1/2大小。这样，本来占用2个物理像素的 1px 样式，现在占用的就是标准的一个物理像素。根据像素比的不同，这个缩放比例可以被计算为不同的值，用 js 代码实现如下：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> scale </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">devicePixelRatio</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 这里 metaEl 指的是 meta 标签对应的 Dom</span></span>
<span class="line"><span style="color:#A6ACCD;">metaEl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setAttribute</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">content</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">width=device-width,user-scalable=no,initial-scale=</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">scale</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">,maximum-scale=</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">scale</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">,minimum-scale=</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">scale</span><span style="color:#89DDFF;">}\`</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>这样解决了，但这样做的副作用也很大，整个页面被缩放了。这时 1px 已经被处理成物理像素大小，这样的大小在手机上显示边框很合适。但是，一些原本不需要被缩小的内容，比如文字、图片等，也被无差别缩小掉了。</p><h2 id="_12-width-100-与-auto-的区别" tabindex="-1">12.width 100% 与 auto 的区别？ <a class="header-anchor" href="#_12-width-100-与-auto-的区别" aria-label="Permalink to &quot;12.width 100% 与 auto 的区别？&quot;">​</a></h2><h3 id="_12-1-width-100" tabindex="-1">12-1 width: 100% <a class="header-anchor" href="#_12-1-width-100" aria-label="Permalink to &quot;12-1 width: 100%&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">.father {</span></span>
<span class="line"><span style="color:#A6ACCD;">            width: 500px;</span></span>
<span class="line"><span style="color:#A6ACCD;">            padding: 20px;</span></span>
<span class="line"><span style="color:#A6ACCD;">            border: 1px solid black;</span></span>
<span class="line"><span style="color:#A6ACCD;">            height: 200px;</span></span>
<span class="line"><span style="color:#A6ACCD;">            background-color: red;</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">.son {</span></span>
<span class="line"><span style="color:#A6ACCD;">       width: 100%;</span></span>
<span class="line"><span style="color:#A6ACCD;">       padding: 20px;</span></span>
<span class="line"><span style="color:#A6ACCD;">       height: 200px;</span></span>
<span class="line"><span style="color:#A6ACCD;">       background-color: yellow;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p><img src="`+p+'" alt="image-20221013194441922"></p><p><img src="'+i+`" alt="image-20221013194510155"></p><p>子元素的宽度如果设置了100%，则子元素的content一定等于父元素的content。</p><h3 id="_12-2-width-auto" tabindex="-1">12-2 width: auto <a class="header-anchor" href="#_12-2-width-auto" aria-label="Permalink to &quot;12-2 width: auto&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">.father {</span></span>
<span class="line"><span style="color:#A6ACCD;">            width: 500px;</span></span>
<span class="line"><span style="color:#A6ACCD;">            padding: 20px;</span></span>
<span class="line"><span style="color:#A6ACCD;">            border: 1px solid black;</span></span>
<span class="line"><span style="color:#A6ACCD;">            height: 200px;</span></span>
<span class="line"><span style="color:#A6ACCD;">            background-color: red;</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">.son {</span></span>
<span class="line"><span style="color:#A6ACCD;">       width: auto;</span></span>
<span class="line"><span style="color:#A6ACCD;">       padding: 20px;</span></span>
<span class="line"><span style="color:#A6ACCD;">       height: 200px;</span></span>
<span class="line"><span style="color:#A6ACCD;">       background-color: yellow;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p><img src="`+c+'" alt="image-20221013195454825"></p><p>子元素设置了width: auto，则父元素的content等于子元素的border+padding+content</p><h2 id="_13-怎样实现居中" tabindex="-1">13.怎样实现居中 <a class="header-anchor" href="#_13-怎样实现居中" aria-label="Permalink to &quot;13.怎样实现居中&quot;">​</a></h2><h2 id="_14-flex布局了解过吗" tabindex="-1">14.flex布局了解过吗？ <a class="header-anchor" href="#_14-flex布局了解过吗" aria-label="Permalink to &quot;14.flex布局了解过吗？&quot;">​</a></h2>',68),h=[d];function C(A,g,u,y,b,D){return a(),n("div",null,h)}const F=s(r,[["render",C]]);export{x as __pageData,F as default};
