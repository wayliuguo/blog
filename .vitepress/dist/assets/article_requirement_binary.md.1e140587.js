import{_ as e,o as l,c as s,U as a}from"./chunks/framework.9adb0f96.js";const t="/blog/assets/1664212722026-21ac2277-4431-4b57-8b65-975bf252dfad.5577d5be.png",n="/blog/assets/image-20230903220559229.3c18be75.png",o="/blog/assets/1664195318779-47dbb8b3-ae10-48eb-94d2-16a0f63dca3e.c46cd576.png",i="/blog/assets/image-20230903230228710.4004b8fd.png",p="/blog/assets/image-20230903230926370.f35cc9f3.png",c="/blog/assets/image-20230903232344250.0c9dc709.png",r="/blog/assets/image-20230903232358185.657c9efe.png",B=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"article/requirement/binary.md","filePath":"article/requirement/binary.md","lastUpdated":1693803618000}'),d={name:"article/requirement/binary.md"},y=a('<h2 id="二进制" tabindex="-1">二进制 <a class="header-anchor" href="#二进制" aria-label="Permalink to &quot;二进制&quot;">​</a></h2><p>javaScript 提供了一些 API 来处理文件或原始数据，例如</p><ul><li>File</li><li>Blob</li><li>FileReader</li><li>ArrayBuffer</li><li>base64</li></ul><p><img src="'+t+`" alt="无标题-2022-05-01-0034.png"></p><h2 id="blob" tabindex="-1">Blob <a class="header-anchor" href="#blob" aria-label="Permalink to &quot;Blob&quot;">​</a></h2><ol><li>定义</li><li>创建</li><li>常见 MIME 类型</li><li>分片</li></ol><ul><li><p>定义</p><ul><li>Blob 即 binary large object, 二进制大对象，表示原始的类似文件的数据</li><li>MDN: Blob 对象表示一个不可变、原始数据的类文件对象。其数据可以按照文本或二进制进行读取，也可以转换成 ReadableStream 来用于数据操作。</li><li>实际上，Blob 对象是包含有只读原始数据的类文件对象，简单概括就是一个不可修改的二进制文件</li></ul></li><li><p>Blob 创建</p><ul><li><code>new Blob(array, options)</code></li><li><code>array</code>：由<code>ArrayBuffer</code>、<code>ArrayBufferView</code>、<code>Blob</code>、<code>DOMString</code>、等对象构成，将会被放进<code>Blob</code></li><li><code>options</code>: 可选的<code>BlobPropertyBag</code>字典，可能指定如下两个属性 <ul><li><code>type</code>: 默认值为<code>&quot;&quot;</code>，表示将会放入到<code>blob</code>中的数组内容的 MIME 类型</li><li>endings：默认值为<code>transparent</code>, 用于指定包含行结束符<code>\\n</code>的字符串如何被写入，不常用</li></ul></li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">const blob = new Blob([&#39;Hello World&#39;], { type: &#39;text/plain&#39; })</span></span>
<span class="line"><span style="color:#A6ACCD;">const url = URL.createObjectURL(blob)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(blob.size) // 11</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(blob.type) // text/plain</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(url) // blob:null/d2286794-367f-432a-aee8-ef4043ae03da</span></span></code></pre></div></li><li><p>常见 MIME 类型</p><table><thead><tr><th style="text-align:center;">常见 MIME 类型</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">text/plain</td><td style="text-align:center;">纯文本文档</td></tr><tr><td style="text-align:center;">text/html</td><td style="text-align:center;">HTML文档</td></tr><tr><td style="text-align:center;">text/javascript</td><td style="text-align:center;">JavaScript 文件</td></tr><tr><td style="text-align:center;">text/css</td><td style="text-align:center;">css 文件</td></tr><tr><td style="text-align:center;">application/json</td><td style="text-align:center;">JSON文件</td></tr><tr><td style="text-align:center;">application/pdf</td><td style="text-align:center;">PDF文件</td></tr><tr><td style="text-align:center;">application/xml</td><td style="text-align:center;">XML文件</td></tr><tr><td style="text-align:center;">image/jpeg</td><td style="text-align:center;">JPEG图像</td></tr><tr><td style="text-align:center;">image/png</td><td style="text-align:center;">PNG图像</td></tr><tr><td style="text-align:center;">image/gif</td><td style="text-align:center;">GIF图像</td></tr><tr><td style="text-align:center;">image/svg+xml</td><td style="text-align:center;">SVG图像</td></tr><tr><td style="text-align:center;">audio/mpeg</td><td style="text-align:center;">MP3文件</td></tr><tr><td style="text-align:center;">video/mpeg</td><td style="text-align:center;">MP4文件</td></tr></tbody></table></li><li><p>Blob 分片</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">const blob = new Blob([&#39;Hello World&#39;], { type: &#39;text/plain&#39; })</span></span>
<span class="line"><span style="color:#A6ACCD;">// 分片</span></span>
<span class="line"><span style="color:#A6ACCD;">const subBlob = blob.slice(0, 5)</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(subBlob.size) // 5</span></span></code></pre></div></li></ul><h2 id="file" tabindex="-1">File <a class="header-anchor" href="#file" aria-label="Permalink to &quot;File&quot;">​</a></h2><ol><li>定义</li><li>input</li><li>文件拖放</li></ol><ul><li><p>定义</p><ul><li><code>File</code> 对象是特殊类型的<code>Blob</code>，可以用在任意的<code>Blob</code>类型的<code>context</code>中</li><li><code>Blob</code>的属性和方法都可以用于<code>File</code>对象中</li><li>主要通过两种方法来获取<code>File</code>对象 <ul><li><code>&lt;input&gt;</code>元素上选择文件后返回的<code>FileList</code>对象</li><li>文件拖放操作生成的<code>DataTransfer</code>对象</li></ul></li></ul></li><li><p>input</p><ul><li>FileList 是一个数组，每个元素都是一个File对象</li><li>File 对象包含文件的一些属性，继承自 Blob 对象 <ul><li>lastModified：引用文件最后修改日期，为自1970年1月1日0:00以来的毫秒数</li><li>lastModifiedDate：引用文件最后修改日期</li><li>name：名称</li><li>size：大小</li><li>type：文件的媒体类型(MIME)</li><li>webkitRelativePath: 文件的路径或URL</li></ul></li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;input type=&quot;file&quot; id=&quot;fileInput&quot; multiple=&quot;multiple&quot;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">const fileInput = document.getElementById(&#39;fileInput&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">fileInput.onchange = (e) =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">	console.log(e.target.files)</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p><img src="`+n+`" alt="image-20230903220559229"></p></li><li><p>文件拖放</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;div id=&quot;drop-zone&quot;&gt;拖放上传区域&lt;/div&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// 文件拖放</span></span>
<span class="line"><span style="color:#A6ACCD;">const dropZone = document.getElementById(&#39;drop-zone&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">dropZone.ondragover = e =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">	e.preventDefault()</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">dropZone.ondrop = e =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">	e.preventDefault()</span></span>
<span class="line"><span style="color:#A6ACCD;">	const files = e.dataTransfer.files</span></span>
<span class="line"><span style="color:#A6ACCD;">	console.log(files)</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div></li></ul><h2 id="filereader" tabindex="-1">FileReader <a class="header-anchor" href="#filereader" aria-label="Permalink to &quot;FileReader&quot;">​</a></h2><ol><li>定义</li><li>基本使用</li><li>事件处理</li></ol><ul><li><p>定义</p><ul><li>FileReader 是一个异步 API, 用于读取文件并提供其内容以供进一步使用</li><li>其可以将 Blob 读取为不同的格式</li></ul></li><li><p>基本使用</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">const reader = new FileReader()</span></span></code></pre></div><ul><li><p>常用属性如下</p><ul><li><p>error： 读取文件时发生错误</p></li><li><p>result：文件内容</p></li><li><p>readyState：FileReader 状态的数字</p><table><thead><tr><th style="text-align:center;">常量名</th><th style="text-align:center;">值</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">EMPTY</td><td style="text-align:center;">0</td><td style="text-align:center;">还没有加载数据</td></tr><tr><td style="text-align:center;">LOADING</td><td style="text-align:center;">1</td><td style="text-align:center;">数据正在加载</td></tr><tr><td style="text-align:center;">DONE</td><td style="text-align:center;">2</td><td style="text-align:center;">完成读取</td></tr></tbody></table></li></ul></li><li><p>加载文件方法</p><ul><li><code>readAsArrayBuffer()</code>：读取指定<code>Blob</code>中的内容，完成之后，<code>result</code>属性中保存的是被读取文件的<code>ArrayBuffer</code>数据对象</li><li><code>readAsBinaryString()</code>：读取指定<code>Blob</code>中的内容，完成之后，<code>result</code>属性中保存的是被读取文件的原始二进制数据</li><li><code>FileReader.readAsDataURL()</code>：读取指定<code>Blob</code>中的内容，完成之后，<code>result</code>属性中将包含一个<code>data:URL</code>格式的 <code>Base 64</code>字符串以表示所读取文件的内容</li><li><code>FileReader.readAsText()</code>：读取指定<code>Blob</code>中的内容，完成之后，<code>result</code>属性中将包含一个字符串以表示所读取的文件内容</li></ul></li></ul></li><li><p>事件处理</p><ul><li>abort: 中断</li><li>error： 错误</li><li>load： 完成读取</li><li>progress：在读取Blob时触发</li><li>这些方法可以加上前置的on在HTML元素上使用</li><li>由于<code>FileReader</code>对象继承自<code>EventTarget</code>，因此可以使用<code>addEventListener()监听上述事件</code></li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;input type=&quot;file&quot; id=&quot;fileInput&quot; multiple=&quot;multiple&quot;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">const fileInput = document.getElementById(&#39;fileInput&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">const reader = new FileReader()</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">fileInput.onchange = e =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">    // 作为text读取</span></span>
<span class="line"><span style="color:#A6ACCD;">    // reader.readAsText(e.target.files[0])</span></span>
<span class="line"><span style="color:#A6ACCD;">    // 作为 url 读取</span></span>
<span class="line"><span style="color:#A6ACCD;">    reader.readAsDataURL(e.target.files[0])</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">reader.onload = e =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">	console.log(e.target.result)</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div></li></ul><h2 id="arraybuffer" tabindex="-1">ArrayBuffer <a class="header-anchor" href="#arraybuffer" aria-label="Permalink to &quot;ArrayBuffer&quot;">​</a></h2><ol><li>定义</li><li>ArrayBuffer 常用属性方法</li><li>TypedArray</li><li>DataView</li></ol><ul><li><p>定义</p><ul><li><p>表示通用的、固定长度的<strong>原始二进制数据缓冲区</strong></p></li><li><p>与Blob 区别</p><ul><li>Blob 作为一个整体文件，适用于传输</li><li>当需要对二进制数据进行操作时，比如要修改某一段数据时，就可以使用ArrayBuffer</li></ul></li><li><p>ArrayBuffer 内容不能直接操作，只能通过<code>DataView</code>对象或者<code>TypedArray</code>对象来访问，这些对象用于读取和写入缓冲区内容</p></li><li><p>ArryBuffer 本身就是一个黑盒，不能直接读写所存储数据，需要借助一下视图对象来读写</p><ul><li>TypedArray: 用来生成内存的视图，通过9个构造函数，可以生成9种数据格式的视图</li><li>DataViews: 用来生成内存的视图，可以自定义格式和字节序</li></ul><p><img src="`+o+`" alt="image.png"></p></li></ul></li><li><p>ArrayBuffer 常用属性方法</p><ul><li><code>new ArrayBuffer(bytelength)</code></li><li><code>ArrayBuffer.prototype.byteLength</code></li><li><code>ArrayBuffer.prototype.slice()</code></li><li><code>ArrayBuffer.isView()</code><ul><li>用来判断参数是否是TypedArray 实例或者 DataView 实例</li></ul></li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">const buffer = new ArrayBuffer(16)</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(buffer.byteLength) // 16</span></span>
<span class="line"><span style="color:#A6ACCD;">const newBuffer = buffer.slice(0, 8)</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(newBuffer) // ArrayBuffer(8)</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(ArrayBuffer.isView(buffer)) // false</span></span>
<span class="line"><span style="color:#A6ACCD;">const view = new Uint32Array(buffer)</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(ArrayBuffer.isView(view)) // true</span></span></code></pre></div></li><li><p>TypeDArray</p><ul><li><p>TypedArray 对象一共提供9种类型的视图，每一种视图都是一种构造函数</p><p><img src="`+i+'" alt="image-20230903230228710"></p></li><li><p><code>new TypedArray(buffer[, byteoffset[,length]])</code></p></li><li><p><code>BYTES_PER_ELEMENT</code>： 表示每种数据类型占据的字节数</p><p><img src="'+p+`" alt="image-20230903230926370"></p></li><li><p><code>TypedArray.prototype.buffer</code></p></li><li><p><code>TypedArray.prototype.slice()</code></p></li><li><p><code>byteLength</code> ：返回 TypedArray 占据的内存长度，单位为字节</p></li><li><p><code>length</code>：返回TypeArray 元素个数</p></li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">let viewInt8 = new Int8Array(16)</span></span>
<span class="line"><span style="color:#A6ACCD;">viewInt8[0] = 10</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(viewInt8)</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(Int8Array.BYTES_PER_ELEMENT) // 1</span></span>
<span class="line"><span style="color:#A6ACCD;">const viewInt32 = new Int32Array(viewInt8)</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(viewInt32.buffer) // ArrayBuffer(64)</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(viewInt8.slice(0, 1))</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(viewInt8.length) // 16</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(viewInt8.byteLength) // 16</span></span></code></pre></div></li><li><p>DataView</p><ul><li><p><code>new DataView(buffer, [,byteOffset[,byteLength]])</code></p><ul><li><code>buffer</code>：一个已存在的<code>ArrayBuffer</code>对象，<code>DataView</code>对象数据源</li><li><code>byteOffset</code>: 偏移量</li><li><code>byteLength</code>: 字节长度</li></ul></li><li><p>读取内存</p><p><img src="`+c+'" alt="image-20230903232344250"></p></li><li><p>写入内存</p><p><img src="'+r+`" alt="image-20230903232358185"></p></li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">const dataView = new DataView(new ArrayBuffer(16))</span></span>
<span class="line"><span style="color:#A6ACCD;">        console.log(dataView)</span></span>
<span class="line"><span style="color:#A6ACCD;">        console.log(dataView.getUint8(0))</span></span></code></pre></div></li></ul><h2 id="object-url" tabindex="-1">Object URL <a class="header-anchor" href="#object-url" aria-label="Permalink to &quot;Object URL&quot;">​</a></h2><ul><li><p>定义</p><ul><li>用来表示File Object 或 Blob Object 的 URL</li></ul></li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;input type=&quot;file&quot; id=&quot;fileInput&quot; multiple=&quot;multiple&quot;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;img id=&quot;preview&quot;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;script&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    const fileInput = document.getElementById(&#39;fileInput&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">    const preview = document.getElementById(&#39;preview&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">    fileInput.onchange = e =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">        objectUrl = URL.createObjectURL(e.target.files[0])</span></span>
<span class="line"><span style="color:#A6ACCD;">        preview.src = objectUrl</span></span>
<span class="line"><span style="color:#A6ACCD;">        console.log(preview.src)</span></span>
<span class="line"><span style="color:#A6ACCD;">        // URL.revokeObjectURL(objectUrl)</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/script&gt;</span></span></code></pre></div><h2 id="base64" tabindex="-1">Base64 <a class="header-anchor" href="#base64" aria-label="Permalink to &quot;Base64&quot;">​</a></h2><ul><li>一种基于64个可打印字符来表示二进制数据的表示方法</li><li>两个函数 <ul><li><code>atob()</code>：解码，解码一个Base64字符串</li><li><code>btoa()</code>：编码，从一个字符串或者二进制数据编码一个Base64字符串</li></ul></li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">btoa(&#39;javascript&#39;) // &#39;amF2YXNjcmlwdA==&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">atob(&#39;amF2YXNjcmlwdA==&#39;) // &#39;javascript&#39;</span></span></code></pre></div>`,22),u=[y];function A(g,C,b,f,h,D){return l(),s("div",null,u)}const x=e(d,[["render",A]]);export{B as __pageData,x as default};
