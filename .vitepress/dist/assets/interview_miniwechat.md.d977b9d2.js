import{_ as a,o as l,c as s,U as e}from"./chunks/framework.9adb0f96.js";const n="/blog/assets/page-lifecycle.2e646c86.9ea0cb68.png",o="/blog/assets/image-20230806225044874.d88120c0.png",i="/blog/assets/image-20230806225058581.e07a13a0.png",t="/blog/assets/11c0ea90-3279-11ec-a752-75723a64e8f5.504c01dd.png",D=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/miniwechat.md","filePath":"interview/miniwechat.md","lastUpdated":1691333597000}'),p={name:"interview/miniwechat.md"},c=e(`<h2 id="生命周期" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期" aria-label="Permalink to &quot;生命周期&quot;">​</a></h2><h2 id="应用生命周期" tabindex="-1">应用生命周期 <a class="header-anchor" href="#应用生命周期" aria-label="Permalink to &quot;应用生命周期&quot;">​</a></h2><p>在app.js里面调用的</p><ul><li>onLaunch：小程序初始化完成时触发，全局只触发一次</li><li>onShow：小程序启动或从后台进入前台时触发</li><li>onHide：小程序从前台进入后台时触发</li><li>onErro：小程序发生脚本错误或API调用报错时触发</li><li>onPageNotFound：小程序要打开的页面不存在时触发</li><li>onUnhandledRejection: 小程序未处理的Promise拒绝时触发</li><li>onThemeChange: 系统切换主题时触发</li><li>globalData: 存储全局数据</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">App({</span></span>
<span class="line"><span style="color:#A6ACCD;">  onLaunch (options) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    // Do something initial when launch.</span></span>
<span class="line"><span style="color:#A6ACCD;">  },</span></span>
<span class="line"><span style="color:#A6ACCD;">  onShow (options) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    // Do something when show.</span></span>
<span class="line"><span style="color:#A6ACCD;">  },</span></span>
<span class="line"><span style="color:#A6ACCD;">  onHide () {</span></span>
<span class="line"><span style="color:#A6ACCD;">    // Do something when hide.</span></span>
<span class="line"><span style="color:#A6ACCD;">  },</span></span>
<span class="line"><span style="color:#A6ACCD;">  onError (msg) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(msg)</span></span>
<span class="line"><span style="color:#A6ACCD;">  },</span></span>
<span class="line"><span style="color:#A6ACCD;">  globalData: &#39;I am global data&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">})</span></span></code></pre></div><h2 id="页面生命周期" tabindex="-1">页面生命周期 <a class="header-anchor" href="#页面生命周期" aria-label="Permalink to &quot;页面生命周期&quot;">​</a></h2><ol><li>onLoad: 页面创建时执行 - 发送请求获取数据</li><li>onShow：页面出现在前台执行 - 请求数据</li><li>onReady：首次渲染后执行 - 获取页面元素</li><li>onHide：页面从前台变为后台执行 - 终止任务，如定时器或播放音乐</li><li>onUnload：页面销毁时执行 - 终止任务</li></ol><p><img src="`+n+'" alt="img"></p><h2 id="组件生命周期" tabindex="-1">组件生命周期 <a class="header-anchor" href="#组件生命周期" aria-label="Permalink to &quot;组件生命周期&quot;">​</a></h2><ol><li>created：组件实例刚创建时，还不能调用<code>setData</code></li><li>attached：组件实例进入页面节点树时</li><li>ready：组件在视图布局完成后执行</li><li>moved：组件实例被移动到节点树另一个位置时</li><li>detached：组件实例从页面节点移除时</li><li>error：每当组件方法抛出错误时执行</li></ol><h2 id="页面路由" tabindex="-1">页面路由 <a class="header-anchor" href="#页面路由" aria-label="Permalink to &quot;页面路由&quot;">​</a></h2><ol><li>navigateTo: 打开新页面</li><li>redirectTo: 页面重定向</li><li>navigateBack: 页面返回，只触发onShow</li><li>switchTab: 切换tab</li><li>wx.reLaunch: 重启动</li></ol><p>注意事项：</p><ol><li><code>navigateTo</code>, <code>redirectTo</code> 只能打开非 tabBar 页面。</li><li><code>switchTab</code> 只能打开 tabBar 页面。</li><li><code>reLaunch</code> 可以打开任意页面。</li></ol><h2 id="双线程架构" tabindex="-1">双线程架构 <a class="header-anchor" href="#双线程架构" aria-label="Permalink to &quot;双线程架构&quot;">​</a></h2><p><img src="'+o+'" alt="image-20230806225044874"></p><p><img src="'+i+'" alt="image-20230806225058581"></p><ul><li>渲染层 <ul><li>使用 webview 进行渲染，有多个页面，所以存在多个webview</li></ul></li><li>逻辑层 <ul><li>才有jsCore 运行js 代码</li></ul></li><li>两个线程之间由Native层之间统一处理，无论是线程的通信还是数据的传递、网络请求都由Native层左转发</li></ul><h2 id="微信小程序性能优化" tabindex="-1">微信小程序性能优化 <a class="header-anchor" href="#微信小程序性能优化" aria-label="Permalink to &quot;微信小程序性能优化&quot;">​</a></h2><p>小程序刚开始进入启动状态，会展示一个固定的启动界面，界面包含小程序的图标、名称、加载提示图标等，微信会在背后完成几项工作</p><ul><li>下载小程序代码包</li><li>加载小程序代码包</li><li>初始化小程序首页</li></ul><p><img src="'+t+`" alt="img"></p><h2 id="微信小程序启动优化" tabindex="-1">微信小程序启动优化 <a class="header-anchor" href="#微信小程序启动优化" aria-label="Permalink to &quot;微信小程序启动优化&quot;">​</a></h2><ul><li>控制代码包大小 <ul><li>上传代码时启用压缩</li><li>清理无用代码与资源</li><li>图片等资源放到cdn</li></ul></li><li>分包加载 <code>subpackages</code><ul><li>将小程序中不经常使用的页面放到多个分包，主包只保留核心页面</li><li>使用分包会出现页面切换延迟（进入分包页面需要下载和注入分包），可以使用预下载</li></ul></li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&quot;subpackages&quot;: [</span></span>
<span class="line"><span style="color:#A6ACCD;">  {</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;root&quot;: &quot;pages/order/&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;name&quot;: &quot;orderPage&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;pages&quot;: [</span></span>
<span class="line"><span style="color:#A6ACCD;">      &quot;page1&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">      &quot;page2&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    ]</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">]</span></span></code></pre></div><ul><li>预加载<code>preloadRule</code></li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&quot;preloadRule&quot;: {</span></span>
<span class="line"><span style="color:#A6ACCD;">  // 进行预加载的路径</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;pages/start/index&quot;: {</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;network&quot;: &quot;all&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    // 指定所属的分包</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;packages&quot;: [&quot;orderPage&quot;]</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><h2 id="微信小程序首屏渲染优化" tabindex="-1">微信小程序首屏渲染优化 <a class="header-anchor" href="#微信小程序首屏渲染优化" aria-label="Permalink to &quot;微信小程序首屏渲染优化&quot;">​</a></h2><ul><li>提前首屏数据请求，如将接口请求放在onLoad而不是onReady</li><li>精简首屏数据，与视图渲染无关的数据尽量不要放在data</li><li>避免阻塞渲染，如在onLoad里不要使用同步</li></ul><h2 id="微信小程序渲染性能优化" tabindex="-1">微信小程序渲染性能优化 <a class="header-anchor" href="#微信小程序渲染性能优化" aria-label="Permalink to &quot;微信小程序渲染性能优化&quot;">​</a></h2><ul><li>避免不当使用<code>setData</code><ul><li>每次<code>setData</code>调用都是一次进程间通信过程，通信开销与<code>setDta</code>数据量正相关</li><li><code>setData</code>会引发视图层面内容更新，会阻塞用户交互</li><li>不要频繁调用<code>setData</code>与每次<code>setData</code>不要塞太多数量数据</li></ul></li><li>在列表渲染中合理使用key值</li><li>长列表渲染优化 <ul><li>虚拟列表</li><li>微信<a href="https://github.com/wechat-miniprogram/recycle-view" target="_blank" rel="noreferrer">recycle-view</a></li></ul></li><li>使用wxs直接操作视图数据，避免跨线程开销</li></ul>`,31),r=[c];function d(u,h,C,A,g,m){return l(),s("div",null,r)}const y=a(p,[["render",d]]);export{D as __pageData,y as default};
