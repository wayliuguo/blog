import{_ as a,o as s,c as l,U as e}from"./chunks/framework.9adb0f96.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"article/project/moduleStandard.md","filePath":"article/project/moduleStandard.md","lastUpdated":1691762774000}'),n={name:"article/project/moduleStandard.md"},o=e(`<h2 id="主流模块化规范" tabindex="-1">主流模块化规范 <a class="header-anchor" href="#主流模块化规范" aria-label="Permalink to &quot;主流模块化规范&quot;">​</a></h2><ul><li>CommonJS</li><li>AMD</li><li>CMD</li><li>UDM</li><li>ES6</li></ul><h2 id="commonjs-同步加载" tabindex="-1">CommonJS（同步加载） <a class="header-anchor" href="#commonjs-同步加载" aria-label="Permalink to &quot;CommonJS（同步加载）&quot;">​</a></h2><ul><li>规定每个文件就是一个模块，有独立的作用域</li><li>每个模块内部都有一个 module 对象代表当前模块，其具有以下属性 <ul><li>id：模块标识符，通常是绝对路径的模块文件名</li><li>filename 模块文件名， 带有绝对路径</li><li>loaded 布尔值，是否已加载</li><li>parent 一个对象，调用该模块的模块</li><li>children：一个数组，该模块用到的其他模块</li><li>exports 对外输出的值</li></ul></li><li>特点 <ul><li>文件即模块，文件内代码运行在独立作用域</li><li>模块可以被多次引用加载，第一次加载会被缓存，之后使用缓存结果</li><li>加载某个模块，就是引导该模块的<code>module.exports</code>属性</li><li><code>module.exports</code> 输出的是值的拷贝，一旦输出，模块内发生变化也不回影响到输出值</li><li>加载顺序按照代码引入的顺序</li></ul></li></ul><h2 id="amd-异步加载" tabindex="-1">AMD（异步加载） <a class="header-anchor" href="#amd-异步加载" aria-label="Permalink to &quot;AMD（异步加载）&quot;">​</a></h2><ul><li>模块化加载时异步的，完全贴合浏览器的</li><li>异步加载：同时并发记载所依赖的模块，当所有依赖模块都加载完成之后，再执行当前模块的回调函数</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">define(id?,dependencies?, factory)</span></span></code></pre></div><ul><li>id：模块名称</li><li>dependencies：一个数组，定义了依赖的模块</li><li>factory：模块初始化时要执行的函数或对象</li></ul><h2 id="cmd" tabindex="-1">CMD <a class="header-anchor" href="#cmd" aria-label="Permalink to &quot;CMD&quot;">​</a></h2><ul><li>整合了 CommonJS 合 AMD 的特点，其规范实现为<code>sea.js</code></li><li>同时支持t同步和异步加载</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">define(factory)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">define(function(require, exports, module) {})</span></span></code></pre></div><ul><li>参数说明 <ol><li>1.require是一个函数，通过调用它可以引用其他模块，也可以调用 require.async函数来异步调用模块。</li><li>exports是一个对象，当定义模块的时候，需要通过向参数exports添加属 性来导出模块API。</li><li>module是一个对象，它包含3个属性:. uri，模块完整的URI路径; . dependencies,模块的依赖; exports，模块需要被导出的API，作用同第二个参数exports。</li></ol></li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">define(function(require，exports, module) </span></span>
<span class="line"><span style="color:#A6ACCD;">    {</span></span>
<span class="line"><span style="color:#A6ACCD;">        var add - require( &#39; math &#39; ).add;</span></span>
<span class="line"><span style="color:#A6ACCD;">        exports.increment = function(val) {</span></span>
<span class="line"><span style="color:#A6ACCD;">            return add(val，1</span></span>
<span class="line"><span style="color:#A6ACCD;">        );</span></span>
<span class="line"><span style="color:#A6ACCD;">    };</span></span>
<span class="line"><span style="color:#A6ACCD;">    module.id - &quot;increment&quot; ;</span></span>
<span class="line"><span style="color:#A6ACCD;">});</span></span></code></pre></div><h2 id="umd" tabindex="-1">UMD <a class="header-anchor" href="#umd" aria-label="Permalink to &quot;UMD&quot;">​</a></h2><ul><li>并不是模块管理规范，而是带有前后端同构思想的模块封装工具</li><li>通过UMD可以在核实的环境选择对应的模块规范</li><li>实现原理 <ul><li>先判断是否支持 Node.js 模块格式（exports 是否存在）</li><li>再判断是否支持 AMD（define 是否存在），存在则使用 AMD 方式加载模块</li><li>若两个都不存在，则将模块公开到全局（Window或Global）</li></ul></li></ul><h2 id="es6" tabindex="-1">ES6 <a class="header-anchor" href="#es6" aria-label="Permalink to &quot;ES6&quot;">​</a></h2><ul><li>CommonJS 和 AMD 是在运行时确认依赖关系（运行时加载）</li><li>ES6 module 在编译时就确认依赖关系，所有的加载其实都是引用，好处时可以执行静态分析和类型检查</li><li><strong>导出</strong></li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">export const first = 1</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">const first = 1</span></span>
<span class="line"><span style="color:#A6ACCD;">export { first }</span></span></code></pre></div><ul><li><strong>as 关键字</strong><ul><li>可以通过此关键字</li></ul></li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">const first = 1</span></span>
<span class="line"><span style="color:#A6ACCD;">export { first as second }</span></span></code></pre></div><ul><li><strong>export default</strong><ul><li>导出默认输出，即用户不需要知道模块中名字，在导入的时候为其指定任意名字</li></ul></li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">export default function () {}</span></span></code></pre></div><ul><li><strong>导入</strong></li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">import { first } from &#39;./profile.js&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">import { lastName as surname } from &#39;./profile.js&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">import * as circle from &#39;./circle&#39;</span></span></code></pre></div><ul><li><strong>浏览器中使用ES模块</strong></li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;script type=&quot;module&quot;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  import module from &#39;./module&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/script&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;script nomodule&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  alert(&#39;您的浏览器不支持 ES 模块，请先升级！&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/script&gt;</span></span></code></pre></div><h2 id="package-json-与模块化" tabindex="-1">package.json 与模块化 <a class="header-anchor" href="#package-json-与模块化" aria-label="Permalink to &quot;package.json 与模块化&quot;">​</a></h2><h2 id="main" tabindex="-1">main <a class="header-anchor" href="#main" aria-label="Permalink to &quot;main&quot;">​</a></h2><ul><li>用来指定加载的入口文件，在<code>browser</code>和<code>Node</code>环境中都可以使用</li><li>我们将项目发布为<code>npm</code>包，当使用<code>require</code>导入时，返回的就是<code>main</code>字段所列出的文件的<code>module.exports</code>属性</li><li>如果不指定该字段，默认就是根目录下的 <code>index.js</code></li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&quot;main&quot;: &quot;lib/index.js&quot;</span></span></code></pre></div><h2 id="browser" tabindex="-1">browser <a class="header-anchor" href="#browser" aria-label="Permalink to &quot;browser&quot;">​</a></h2><ul><li>可以定义 npm 包在 browser 环境下的入口文件</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&quot;browser&quot;: &quot;lib/index.js&quot;</span></span></code></pre></div><h2 id="module" tabindex="-1">module <a class="header-anchor" href="#module" aria-label="Permalink to &quot;module&quot;">​</a></h2><ul><li>可以定义 npm 包的 ESM 规范入口文件</li><li>browser 和 node 环境均可使用</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&quot;module&quot;: &quot;es/index.js&quot;</span></span></code></pre></div>`,36),i=[o];function t(p,c,r,d,u,m){return s(),l("div",null,i)}const A=a(n,[["render",t]]);export{h as __pageData,A as default};
