import{_ as l,o as i,c as a,U as t}from"./chunks/framework.9adb0f96.js";const e="/blog/assets/性能优化.7c384216.png",s="/blog/assets/3UhlOxRc0j8Vc4DGd4dt.1c157716.png",r="/blog/assets/image-20230712220950790.f998f5c6.png",o="/blog/assets/24Y3T5sWNuZD9fKhkuER.f5e87607.svg",n="/blog/assets/Se4TiXIdp8jtLJVScWed.30fbfb02.svg",p="/blog/assets/WZM0n4aXah67lEyZugOT.dc2dcf3a.svg",h="/blog/assets/clHG8Yv239lXsGWD6Iu6.a2eaf9ee.svg",d="/blog/assets/xKxwKagiz8RliuOI2Xtc.b3b0cc62.svg",c="/blog/assets/image-20230712224834921.a0fe385d.png",u="/blog/assets/image-20230713081150851.70acc1ae.png",b="/blog/assets/image-20230713081419032.411f6844.png",k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/performance.md","filePath":"interview/performance.md","lastUpdated":1694957973000}'),m={name:"interview/performance.md"},f=t('<p><img src="'+e+'" alt="性能优化"></p><h2 id="什么是性能" tabindex="-1">什么是性能 <a class="header-anchor" href="#什么是性能" aria-label="Permalink to &quot;什么是性能&quot;">​</a></h2><p>MDN上的web性能定义：web性能是网站或应用程序的客观度量和可感知的用户体验。</p><ul><li>减少整体加载时间：减小文件体积、减少HTTP请求、使用预加载</li><li>使网站尽快可用：仅加载首屏内容，其他内容根据需要进行懒加载</li><li>平滑和交互性：使用css替代js动画、较少UI重绘</li><li>感知表现：你的用户可能不能做得更快，但你可以让用户感觉更快。耗时操作要给用户反馈，比如加载动画、进度条、骨架屏等提示信息</li><li>性能测定：性能指标、性能测试、性能监控持续优化</li></ul><h2 id="如何进行web性能优化" tabindex="-1">如何进行web性能优化 <a class="header-anchor" href="#如何进行web性能优化" aria-label="Permalink to &quot;如何进行web性能优化&quot;">​</a></h2><ol><li>首先需要了解性能指标——多快才算快？</li><li>使用专业的工具可量化地评估出网站或应用的性能表现</li><li>立足于网站页面响应的生命周期，分析出造成性能表现的原因</li><li>进行技术改造，可行性分析等具体的优化实施</li><li>迭代优化</li></ol><h2 id="性能指标" tabindex="-1">性能指标 <a class="header-anchor" href="#性能指标" aria-label="Permalink to &quot;性能指标&quot;">​</a></h2><ul><li>RAIL 性能模型</li><li>基于用户体验的核心指标</li><li>新一代性能指标：Web Vitals</li></ul><h2 id="性能测量" tabindex="-1">性能测量 <a class="header-anchor" href="#性能测量" aria-label="Permalink to &quot;性能测量&quot;">​</a></h2><ul><li>浏览器DevTools调试工具</li><li>网络监控分析</li><li>性能监控分析</li><li>灯塔（Lighthouse）</li><li>网站整体质量评估，并给出优化建议</li><li>WebPageTest</li><li>多测试地点</li><li>全面的性能报告</li></ul><h2 id="web-性能指标" tabindex="-1">web 性能指标 <a class="header-anchor" href="#web-性能指标" aria-label="Permalink to &quot;web 性能指标&quot;">​</a></h2><h2 id="rail-性能模型" tabindex="-1">RAIL 性能模型 <a class="header-anchor" href="#rail-性能模型" aria-label="Permalink to &quot;RAIL 性能模型&quot;">​</a></h2><ul><li>响应 Response:：应该尽可能快速的响应用户(感知延迟之前接收到操作的反馈)（100ms内） <ul><li>比如在点击按钮向后台发起某项业务处理请求时，首先反馈给用户开始处理的提示，然后在处理完成的回调后反馈完成的提示</li></ul></li><li>动画 Animation：展示动画每一帧以16ms进行渲染，保持一致性避免卡顿</li><li>空闲 Idel：使用js主线程应把任务划分到执行时间小于50ms片段，这样可以释放线程进行用户交互</li><li>加载：应该小于5s的时间加载完成网站，并且可以进行交互</li></ul><h2 id="基于用户体验的性能指标" tabindex="-1">基于用户体验的性能指标 <a class="header-anchor" href="#基于用户体验的性能指标" aria-label="Permalink to &quot;基于用户体验的性能指标&quot;">​</a></h2><h2 id="fcp-first-contentful-paint-首次内容绘制" tabindex="-1">FCP(First Contentful Paint) 首次内容绘制 <a class="header-anchor" href="#fcp-first-contentful-paint-首次内容绘制" aria-label="Permalink to &quot;FCP(First Contentful Paint) 首次内容绘制&quot;">​</a></h2><p>浏览器首次绘制来自DOM的内容的时间，内容必须是文本、图片（包含背景图）、非白色的canvas或SVG，包括带有正在加载中的web字体的文本（下图二即是FCP）</p><p><img src="'+s+'" alt="来自 google.com 的 FCP 时间轴"></p><h3 id="速度指标" tabindex="-1">速度指标 <a class="header-anchor" href="#速度指标" aria-label="Permalink to &quot;速度指标&quot;">​</a></h3><table><thead><tr><th>FCP时间（m）</th><th>颜色编码</th><th>FCP分数（HTTP存档百分位数）</th></tr></thead><tbody><tr><td>0-2</td><td>绿色（快速）</td><td>75-100</td></tr><tr><td>2-4</td><td>橙色（中等）</td><td>50-74</td></tr><tr><td>&gt;4</td><td>红色（慢）</td><td>0-49</td></tr></tbody></table><h3 id="优化方案" tabindex="-1">优化方案 <a class="header-anchor" href="#优化方案" aria-label="Permalink to &quot;优化方案&quot;">​</a></h3><p><a href="https://web.dev/fcp/#how-to-improve-fcp" target="_blank" rel="noreferrer">https://web.dev/fcp/#how-to-improve-fcp</a></p><h2 id="lcp-largest-contentful-paint-最大内容绘制" tabindex="-1">LCP(Largest Contentful Paint) 最大内容绘制 <a class="header-anchor" href="#lcp-largest-contentful-paint-最大内容绘制" aria-label="Permalink to &quot;LCP(Largest Contentful Paint) 最大内容绘制&quot;">​</a></h2><p>可视区域中最大的内容元素（占用资源最大）呈现到屏幕上的时间，用以估算页面的主要内容对用户可见时间。</p><p>LCP考虑的元素</p><ul><li>Img</li><li>Video 封面图</li><li>通过 url 函数加载背景图</li><li>文本节点或其他文本元素子级块级元素</li></ul><p><img src="'+r+'" alt="image-20230712220950790"></p><ul><li>LCP随着加载是会变化的，图上绿色的就是LCP</li></ul><h3 id="速度指标-1" tabindex="-1">速度指标 <a class="header-anchor" href="#速度指标-1" aria-label="Permalink to &quot;速度指标&quot;">​</a></h3><table><thead><tr><th>LCP时间（m）</th><th>颜色编码</th></tr></thead><tbody><tr><td>0-2</td><td>绿色（快速）</td></tr><tr><td>2-4</td><td>橙色（中等）</td></tr><tr><td>&gt;4</td><td>红色（慢）</td></tr></tbody></table><h3 id="优化方案-1" tabindex="-1">优化方案 <a class="header-anchor" href="#优化方案-1" aria-label="Permalink to &quot;优化方案&quot;">​</a></h3><p><a href="https://web.dev/optimize-lcp/" target="_blank" rel="noreferrer">https://web.dev/optimize-lcp/</a></p><h2 id="fid-first-input-delay-首次输入延迟" tabindex="-1">FID(First Input Delay) 首次输入延迟 <a class="header-anchor" href="#fid-first-input-delay-首次输入延迟" aria-label="Permalink to &quot;FID(First Input Delay) 首次输入延迟&quot;">​</a></h2><p>从用户第一次与页面交互到浏览器能够响应交互（单击链接、按钮）等到浏览器实际能够响应交互的时间</p><p>输入延迟是因为浏览器的主线程在忙于其他事情，如解析和执行大量计算的JavaScript</p><p>第一次输入延迟通常发生在第一次内容绘制(FCP)和可持续交互时间(TTI)之间，因为页面已经呈现了一些内容，但还不能可靠交互</p><p><img src="'+o+'" alt="带有 FCP 和 TTI 的示例页面加载跟踪"></p><h3 id="速度指标-2" tabindex="-1">速度指标 <a class="header-anchor" href="#速度指标-2" aria-label="Permalink to &quot;速度指标&quot;">​</a></h3><p><img src="'+n+'" alt="好的 fid 值为 2.5 秒，差的值大于 4.0 秒，中间的任何值都需要改进"></p><h3 id="优化方案-2" tabindex="-1">优化方案 <a class="header-anchor" href="#优化方案-2" aria-label="Permalink to &quot;优化方案&quot;">​</a></h3><p><a href="https://web.dev/fid/#how-to-imporve-fid" target="_blank" rel="noreferrer">https://web.dev/fid/#how-to-imporve-fid</a></p><h2 id="tti-time-to-interactive-完全达到可交互状态" tabindex="-1">TTI(Time to Interactive)完全达到可交互状态 <a class="header-anchor" href="#tti-time-to-interactive-完全达到可交互状态" aria-label="Permalink to &quot;TTI(Time to Interactive)完全达到可交互状态&quot;">​</a></h2><p>第一次达到完全可交互状态，可以持续响应用户输入。完全达到可交互状态的时间点是在最后一个长任务完成的时间，并在随后的5s内网络和主线程是空闲的。</p><p><img src="'+p+'" alt="显示 TTI 计算方式的页面加载时间轴"></p><h3 id="速度指标-3" tabindex="-1">速度指标 <a class="header-anchor" href="#速度指标-3" aria-label="Permalink to &quot;速度指标&quot;">​</a></h3><table><thead><tr><th>TTI时间（m）</th><th>颜色编码</th></tr></thead><tbody><tr><td>0-3.8</td><td>绿色（快速）</td></tr><tr><td>3.8-7.3</td><td>橙色（中等）</td></tr><tr><td>&gt;7.3</td><td>红色（慢）</td></tr></tbody></table><h3 id="优化方案-3" tabindex="-1">优化方案 <a class="header-anchor" href="#优化方案-3" aria-label="Permalink to &quot;优化方案&quot;">​</a></h3><p><a href="https://web.dev/tti/#how-to-improve-tti" target="_blank" rel="noreferrer">https://web.dev/tti/#how-to-improve-tti</a></p><h2 id="tbt-total-block-time-总阻塞时间" tabindex="-1">TBT(Total Block Time)总阻塞时间 <a class="header-anchor" href="#tbt-total-block-time-总阻塞时间" aria-label="Permalink to &quot;TBT(Total Block Time)总阻塞时间&quot;">​</a></h2><p>度量了FCP和TTI之间的总时间，在该时间范围内，主线程被阻塞足够长的时间以防止输入响应。</p><p>我们说主线程“被阻止”是因为浏览器无法中断正在进行的任务，如果用户在较长的任务中间与页面进行交互，则浏览器必须等待任务完成才能响应。给定的长任务的阻止时间是其持续时间超过50ms，页面的总阻塞时间=FCP+TTI之间发生的每个长任务的阻塞时间的总和。</p><p><img src="'+h+'" alt="主线程上的任务时间轴"></p><p>上方的时间轴上有五个任务，其中三个是长任务，因为这些任务的持续时间超过 50 毫秒。下图显示了各个长任务的阻塞时间：</p><p><img src="'+d+'" alt="显示阻塞时间的主线程任务时间轴"></p><p>因此，虽然在主线程上运行任务的总时间为 560 毫秒，但其中只有 345 毫秒被视为阻塞时间。</p><h3 id="速度指标-4" tabindex="-1">速度指标 <a class="header-anchor" href="#速度指标-4" aria-label="Permalink to &quot;速度指标&quot;">​</a></h3><table><thead><tr><th>TBT时间（ms）</th><th>颜色编码</th></tr></thead><tbody><tr><td>0-300</td><td>绿色（快速）</td></tr><tr><td>300-600</td><td>橙色（中等）</td></tr><tr><td>&gt;600</td><td>红色（慢）</td></tr></tbody></table><h3 id="优化方案-4" tabindex="-1">优化方案 <a class="header-anchor" href="#优化方案-4" aria-label="Permalink to &quot;优化方案&quot;">​</a></h3><p><a href="https://web.dev/tbt/#how-to-improve-tbt" target="_blank" rel="noreferrer">https://web.dev/tbt/#how-to-improve-tbt</a></p><h2 id="cls-cumulative-layout-shift-累计布局偏移" tabindex="-1"><strong>CLS(Cumulative Layout Shift) 累计布局偏移</strong> <a class="header-anchor" href="#cls-cumulative-layout-shift-累计布局偏移" aria-label="Permalink to &quot;**CLS(Cumulative Layout Shift) 累计布局偏移**&quot;">​</a></h2><p>CLS会测量在页面整个生命周期中发生的每个意外的布局移位的所有单独布局移位分数的总和，它是一种保证页面的视觉稳定性，从而提高用户体验的指标方案。</p><p><img src="'+c+'" alt="image-20230712224834921"></p><p>页面内容的意外移动通常是由于异步加载资源或将DOM元素动态添加到现有内容上方的页面而发生的。可以使用加载占位符使布局不变。</p><h3 id="速度指标-5" tabindex="-1">速度指标 <a class="header-anchor" href="#速度指标-5" aria-label="Permalink to &quot;速度指标&quot;">​</a></h3><table><thead><tr><th>CLS</th><th>颜色编码</th></tr></thead><tbody><tr><td>0-0.1</td><td>绿色（快速）</td></tr><tr><td>0.1-0.25</td><td>橙色（中等）</td></tr><tr><td>&gt;0.25</td><td>红色（慢）</td></tr></tbody></table><h3 id="优化方案-5" tabindex="-1">优化方案 <a class="header-anchor" href="#优化方案-5" aria-label="Permalink to &quot;优化方案&quot;">​</a></h3><p><a href="https://web.dev/cls/#how-to-improve-cls" target="_blank" rel="noreferrer">https://web.dev/cls/#how-to-improve-cls</a></p><h2 id="speed-index-速度指数" tabindex="-1">Speed Index 速度指数 <a class="header-anchor" href="#speed-index-速度指数" aria-label="Permalink to &quot;Speed Index 速度指数&quot;">​</a></h2><p>页面可视区域中内容的填充速度的指标，可以通过计算页面可见区域内容显示的平均时间来衡量。</p><h3 id="速度指标-6" tabindex="-1">速度指标 <a class="header-anchor" href="#速度指标-6" aria-label="Permalink to &quot;速度指标&quot;">​</a></h3><table><thead><tr><th>TBT时间（s）</th><th>颜色编码</th></tr></thead><tbody><tr><td>0-4.3</td><td>绿色（快速）</td></tr><tr><td>4.3-5.8</td><td>橙色（中等）</td></tr><tr><td>&gt;5.8</td><td>红色（慢）</td></tr></tbody></table><h2 id="web-vitals" tabindex="-1">web Vitals <a class="header-anchor" href="#web-vitals" aria-label="Permalink to &quot;web Vitals&quot;">​</a></h2><p>精简版性能指标，包括：</p><ul><li>加载体验</li><li>交互性</li><li>页面内容的视觉稳定性</li></ul><h3 id="core-web-vitals-与-web-vitals" tabindex="-1">core web Vitals 与 web Vitals <a class="header-anchor" href="#core-web-vitals-与-web-vitals" aria-label="Permalink to &quot;core web Vitals 与 web Vitals&quot;">​</a></h3><p><img src="'+u+'" alt="image-20230713081150851"></p><p>Core web Vitals 是应用所有web页面的子集，是其最重要的核心</p><p><img src="'+b+`" alt="image-20230713081419032"></p><ul><li>加载性能（LCP）-显示最大内容元素所需的时间</li><li>交互性（FID）-首次输入延迟时间</li><li>视觉稳定性（CLS）-累积布局配置偏移</li></ul><h3 id="测量web-vitals" tabindex="-1">测量Web Vitals <a class="header-anchor" href="#测量web-vitals" aria-label="Permalink to &quot;测量Web Vitals&quot;">​</a></h3><ul><li>性能测试工具，比如Lighthouse</li><li>使用web-vitals库</li><li>使用浏览器插件Web Vitals</li></ul><h2 id="web-性能测试" tabindex="-1">web 性能测试 <a class="header-anchor" href="#web-性能测试" aria-label="Permalink to &quot;web 性能测试&quot;">​</a></h2><ul><li>Lighthouse</li><li>Performance</li><li>Memory</li><li>Chrome DevTools</li></ul><h2 id="网页生命周期" tabindex="-1">网页生命周期 <a class="header-anchor" href="#网页生命周期" aria-label="Permalink to &quot;网页生命周期&quot;">​</a></h2><ol><li>浏览器查看缓存，判断请求资源在缓存中并且新鲜</li></ol><ul><li>如果已缓存且足够新鲜，直接提供给客户端</li><li>否则与服务器进行验证 <ul><li>强缓存：Expires、Cache-Control</li><li>协商缓存：（Last-Modified、If-Modified-Since）、（Etag、If-None-Match）</li></ul></li></ul><ol start="2"><li>解析URL获取协议、主机、端口，并组装一个请求报文</li><li>获取主机的ip地址 <ul><li>浏览器缓存</li><li>本地DNS服务器</li><li>根域名服务器</li><li>顶级域名服务器</li><li>权威域名服务器</li></ul></li><li>建立TCP连接，并进行三次握手</li><li>TCP建立连接，发送http请求</li><li>服务端相关处理 <ul><li>检查http请求头是否包含缓存信息并验证</li><li>读取请求并准备http响应，可能需要进行数据库查询</li><li>将响应报文发送回浏览器</li></ul></li><li>浏览器接收HTTP响应，根据情况是否关闭或者重用TCP连接，关闭需要进行四次挥手</li><li>浏览器检查响应状态，判断资源是否可缓存，解码（如gzip压缩）</li><li>对资源类型决定如何处理（假设HTML文档，即关键渲染路径） <ul><li>解析文档，构建DOM树</li><li>下载资源，构建CSSOM 树</li><li>渲染绘制：将上面两个对象模型合并为渲染树，该渲染树只包含渲染可见的节点 <ol><li>从所生成的DOM树根节点向下遍历每个节点，忽略所有不可见的节点</li><li>在CSSOM 中为每个可见的子节点找到对应规则应用</li><li>布局阶段：根据所得到的渲染树，计算他们在设备视图中的具体位置和大小，输出一个“盒模型”</li><li>绘制阶段：将每个节点的具体绘制方式转化为屏幕上的实际像素</li></ol></li></ul></li><li>HTM 解析遇到script标签时进行资源加载和执行</li></ol><ul><li>async、defer</li></ul><h2 id="性能优化总结" tabindex="-1">性能优化总结 <a class="header-anchor" href="#性能优化总结" aria-label="Permalink to &quot;性能优化总结&quot;">​</a></h2><ul><li>资源响应速度</li><li>资源体积优化</li><li>资源加载顺序</li><li>代码质量</li><li>交互相关性能优化 <ul><li>操作响应速度</li><li>页面流畅度</li><li>交互设计体验</li></ul></li></ul><h2 id="资源响应速度" tabindex="-1">资源响应速度 <a class="header-anchor" href="#资源响应速度" aria-label="Permalink to &quot;资源响应速度&quot;">​</a></h2><ol><li>使用 CDN 加速：利用CDN增加并发连接和长缓存的优势来加速下载静态资源</li><li>开启gzip压缩：使用 gzip 压缩编码技术，减小资源体积。</li><li>浏览器缓存：利用浏览器缓存(强缓存与协商缓存)与 Nginx 代理层缓存，缓存静态资源文件。</li><li>减少网络请求次数和体积：通过压缩文件及合并小文件为大文件，减少网络请求次数，但需要找到合理的平衡点。</li><li>升级 HTTP 协议</li></ol><ul><li><p>CDN 加速</p><ul><li>内容分发网络（CDN） 是一组分布在多个不同物理位置的 web 服务器</li><li>当服务器离用户越远，延迟越高</li><li>CDN 通过在多个位置部署服务器，缩短距离从而达到缩短时间</li><li><a href="/blog/interview/network.html#七、cdn">CDN原理</a></li></ul></li><li><p>gzip 压缩</p><ul><li>前端使用 webpack 进行 gzip 压缩</li><li>服务器使用 Nginx 进行压缩</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">// webpack</span></span>
<span class="line"><span style="color:#A6ACCD;">if (p<wbr>rocess.env.NODE_ENV === &#39;production&#39;) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  plugins.push(new CompressionWebpackPlugin({</span></span>
<span class="line"><span style="color:#A6ACCD;">    filename: &#39;[path].gz[query]&#39;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    algorithm: &#39;gzip&#39;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    test: new RegExp(\`\\.(\${productionGzipExtensions.join(&#39;|&#39;)})$\`),</span></span>
<span class="line"><span style="color:#A6ACCD;">    threshold: 10240,</span></span>
<span class="line"><span style="color:#A6ACCD;">    minRatio: 0.8,</span></span>
<span class="line"><span style="color:#A6ACCD;">    deleteOriginalAssets: false</span></span>
<span class="line"><span style="color:#A6ACCD;">  }))</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// nginx</span></span>
<span class="line"><span style="color:#A6ACCD;">gzip on;</span></span>
<span class="line"><span style="color:#A6ACCD;">gzip_static on;</span></span>
<span class="line"><span style="color:#A6ACCD;">gzip_min_length 1k;</span></span>
<span class="line"><span style="color:#A6ACCD;">gzip_buffers 4 16k;</span></span>
<span class="line"><span style="color:#A6ACCD;">gzip_comp_level 2;</span></span>
<span class="line"><span style="color:#A6ACCD;">gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php application/vnd.ms-fontobject font/ttf font/opentype font/x-woff image/png image/jpeg image/svg+xml image/gif;</span></span>
<span class="line"><span style="color:#A6ACCD;">gzip_vary off;</span></span>
<span class="line"><span style="color:#A6ACCD;">gzip_disable &quot;MSIE [1-6].&quot;;</span></span></code></pre></div></li><li><p><a href="/blog/interview/browser.html#三、http-缓存">浏览器缓存</a></p></li><li><p>减少网络请求次数和体积</p><ul><li>合理使用 webpack 打包策略进行代码拆包</li><li>图片精灵（升级HTTP/2后不建议使用）</li><li>清理多余js/css代码</li><li>图片转base64策略优化，太大的突破不要使用base64，base64体积会更大，且影响js体积</li></ul></li><li><p><a href="/blog/interview/network.html#_5-版本总结比较">升级 HTTP 协议</a></p></li></ul><h2 id="资源体积优化" tabindex="-1">资源体积优化 <a class="header-anchor" href="#资源体积优化" aria-label="Permalink to &quot;资源体积优化&quot;">​</a></h2><ul><li>文本资源（html、css、js） <ul><li>代码压缩：minify</li><li>压缩内容：比如使用 gzip 压缩</li><li>代码精简</li><li>JS 体积优化方案 <ul><li>Tree Shaking</li><li>Code Split</li><li>组件按需加载</li><li>代码按需打包</li></ul></li><li>CSS 体积优化方案 <ul><li>引入第三方库样式文件时按需引入</li><li>减少不必要的 css 前缀补全</li></ul></li></ul></li><li>图片资源 <ul><li>去掉不必要的图片，能使用样式实现的不要使用图片</li><li>雪碧图（HTTP/2及以上不需要雪碧图）</li><li>上传图片大小限制</li><li>压缩项目静态图片</li><li>接入Webp图片处理，可以根据浏览器请求中所带的 accept 来判断是否支持webp格式，各cdn厂商基本上也都支持webp图片转换：阿里云图像处理</li></ul></li></ul><h2 id="资源加载的顺序优化" tabindex="-1">资源加载的顺序优化 <a class="header-anchor" href="#资源加载的顺序优化" aria-label="Permalink to &quot;资源加载的顺序优化&quot;">​</a></h2><p>图片、音频、视频等文件就不会阻塞页面的首次渲染，而 JavaScript、首次请求的 HTML 资源文件、CSS 文件是会阻塞首次渲染的，因为在构建 DOM 的过程中需要 HTML 和 JavaScript 文件，在构造渲染树的过程中需要用到 CSS 文件</p><ul><li>把 css 放在 header中，便于页面渲染出来时，页面能按照预期中的样式正常显示</li><li>js 代码一般放在 DOM 底部，如果 JavaScript 文件中没有操作 DOM 相关代码，就可以将该 JavaScript 脚本设置为异步加载，通过 async 或 defer 来标记代码</li></ul><h2 id="代码质量" tabindex="-1">代码质量 <a class="header-anchor" href="#代码质量" aria-label="Permalink to &quot;代码质量&quot;">​</a></h2><p>代码质量分为很多方面，比如代码量、复杂度、代码结构设计等等</p><ul><li>代码量 <ul><li>代码精简：使用简洁并清晰的代码编写，这个一般与开发者的工作经验或者知识面有很大的关系 <ul><li>使用 lodash 提供的功能函数</li><li>使用正则替代一些复杂的js校验或者匹配功能</li><li>合理使用一些位运算符</li><li>使用es6语法</li><li>去除无效代码</li></ul></li><li>抽离并封装公用模块代码 <ul><li>当一个功能被多次使用就应该封装成公共函数</li><li>公共组件封装</li></ul></li><li>css原子化，尽量让每一行css都能得到充分利用</li></ul></li><li>代码复杂度设计 <ul><li>时间复杂度（增加 js 解析时间，影响了性能） <ul><li>减少嵌套循环，使用空间换时间</li><li>使用高性能算法处理复杂功能</li></ul></li><li>空间复杂度（占据设备内存过大时，可能引起浏览器崩溃等问题） <ul><li>减少全局变量，和注意全局变量所占内存，防止内存不断增大，导致内存溢出。</li><li>注意销毁不需要的对象，防止不销毁旧的对象，又不断生成新的对象，页面所在内存持续增长，导致页面崩溃。</li></ul></li></ul></li><li>代码结构设计 <ul><li>组件懒加载</li><li>virtual-list</li><li>图片懒加载</li></ul></li></ul><h2 id="交互相关性能优化" tabindex="-1">交互相关性能优化 <a class="header-anchor" href="#交互相关性能优化" aria-label="Permalink to &quot;交互相关性能优化&quot;">​</a></h2><p>影响交互性能的主要有几方面： 操作响应速度、 页面流畅度、 交互体验设计</p><ul><li>操作响应速度 <ul><li>什么情况会影响操作的响应速度？ <ul><li>操作后执行时间过长，用户等待时间长</li><li>有任务正在执行，占据主线程，需要等待主线程空闲</li></ul></li><li>优化 <ul><li>首次加载只执行首屏需要代码，其他按需加载</li><li>优化代码执行时间</li></ul></li></ul></li><li>页面流畅度 <ul><li>渲染不及时，页面掉帧 <ul><li>js 执行时间过长</li><li>回流重绘较多</li><li>资源加载阻塞</li></ul></li><li>页面内存占用过高，运行卡顿 <ul><li>全局变量引起的内存泄露</li><li>闭包引起的内存泄露</li><li>定时器没清除</li><li>循环引用</li><li>DOM 删除时没有解绑事件</li><li>没有清理的 DOM 元素引用</li></ul></li></ul></li><li>交互体验设计 <ul><li>用户习惯</li><li>及时反馈</li></ul></li></ul>`,103),g=[f];function C(q,P,w,v,_,T){return i(),a("div",null,g)}const y=l(m,[["render",C]]);export{k as __pageData,y as default};
