import{_ as a,o as l,c as s,U as n}from"./chunks/framework.9adb0f96.js";const C=JSON.parse('{"title":"快手一面","description":"","frontmatter":{},"headers":[],"relativePath":"interview/experience.md","filePath":"interview/experience.md","lastUpdated":1694698074000}'),e={name:"interview/experience.md"},i=n(`<h1 id="快手一面" tabindex="-1">快手一面 <a class="header-anchor" href="#快手一面" aria-label="Permalink to &quot;快手一面&quot;">​</a></h1><h2 id="http-与-https-区别" tabindex="-1">http 与 https 区别 <a class="header-anchor" href="#http-与-https-区别" aria-label="Permalink to &quot;http 与 https 区别&quot;">​</a></h2><h2 id="闭包、闭包应用、debounce实现" tabindex="-1">闭包、闭包应用、debounce实现 <a class="header-anchor" href="#闭包、闭包应用、debounce实现" aria-label="Permalink to &quot;闭包、闭包应用、debounce实现&quot;">​</a></h2><ul><li>闭包：有权访问另一个函数作用域中变量的函数</li><li>闭包应用 <ul><li>模仿块级作用域<div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">for (var i = 0; i &lt; 10; i++) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    (function (j) {</span></span>
<span class="line"><span style="color:#A6ACCD;">        setTimeout(function () {</span></span>
<span class="line"><span style="color:#A6ACCD;">            console.log(j);</span></span>
<span class="line"><span style="color:#A6ACCD;">        }, 1000 * j)</span></span>
<span class="line"><span style="color:#A6ACCD;">    })(i)</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div></li><li>debounce、throttle、柯里化等</li></ul></li></ul><h2 id="事件循环输出题" tabindex="-1">事件循环输出题 <a class="header-anchor" href="#事件循环输出题" aria-label="Permalink to &quot;事件循环输出题&quot;">​</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">setTimeout(() =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(1)</span></span>
<span class="line"><span style="color:#A6ACCD;">}, 0)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(2)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">new Promise(resolve =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(3)</span></span>
<span class="line"><span style="color:#A6ACCD;">    resolve()</span></span>
<span class="line"><span style="color:#A6ACCD;">}).then(() =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(4)</span></span>
<span class="line"><span style="color:#A6ACCD;">}).then(() =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(6)</span></span>
<span class="line"><span style="color:#A6ACCD;">}).then(() =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(7)</span></span>
<span class="line"><span style="color:#A6ACCD;">})</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(5)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// 2 =&gt;3 =&gt;5 =&gt;4 =&gt;6 =&gt;7 =&gt;1</span></span></code></pre></div><h2 id="实现一个eventbus-具备on、off、emit" tabindex="-1">实现一个eventBus，具备on、off、emit <a class="header-anchor" href="#实现一个eventbus-具备on、off、emit" aria-label="Permalink to &quot;实现一个eventBus，具备on、off、emit&quot;">​</a></h2><h2 id="洋葱模型" tabindex="-1">洋葱模型 <a class="header-anchor" href="#洋葱模型" aria-label="Permalink to &quot;洋葱模型&quot;">​</a></h2><h2 id="不含重复字符的最长子字符串" tabindex="-1">不含重复字符的最长子字符串 <a class="header-anchor" href="#不含重复字符的最长子字符串" aria-label="Permalink to &quot;不含重复字符的最长子字符串&quot;">​</a></h2><h2 id="从浏览器输入url到显示页面的步骤" tabindex="-1">从浏览器输入url到显示页面的步骤？ <a class="header-anchor" href="#从浏览器输入url到显示页面的步骤" aria-label="Permalink to &quot;从浏览器输入url到显示页面的步骤？&quot;">​</a></h2><ol><li>检查缓存</li><li>解析URL 获取协议、域名、端口</li><li>获取ip地址</li><li>建立连接，三次握手</li><li>服务器处理</li><li>接收响应，检查状态码，检查是否进行缓存，是否关闭四次握手</li><li>解析HTML,遇到js的处理</li></ol><h1 id="乐信一面" tabindex="-1">乐信一面 <a class="header-anchor" href="#乐信一面" aria-label="Permalink to &quot;乐信一面&quot;">​</a></h1><ul><li>为什么换工作？</li><li>pc 与 移动端哪部分负责比例？</li><li>跨端开发比较（混合开发、uniApp、reactnative、小程序）</li><li>小程序性能比较</li><li>小程序性能与其他比较</li><li>小程序跳h5如何做身份验证？</li><li>webpack与vite的区别？vite为什么会快？</li><li>vite 替换 webpack 无法兼容 loader 和 plugin 怎么处理？</li><li>webpack 打包流程能说一下么？</li><li>nextTick 为什么能保证在Dom更新后执行？</li><li>同步任务、dom更新、微任务三者执行顺序？</li><li>同步代码执行超过1s，dom是不是等待完1s再进行更新？如何解决？</li><li>性能优化指标，如何获取这些指标？</li><li>做过哪些技术分享？</li><li>工作强度如何？</li><li>自己的缺点？自己的优点？</li><li>加入团队后公司有</li><li>公司业务情况？</li></ul><h1 id="乐信二面" tabindex="-1">乐信二面 <a class="header-anchor" href="#乐信二面" aria-label="Permalink to &quot;乐信二面&quot;">​</a></h1><ul><li>缓存</li><li>vue2、vue3、react 的区别</li><li>A跳转B页面，如果回填A页面的手机号</li><li>B页面输入信息，如何防止攻击</li><li>XSS 攻击如何防止</li><li>localstorage、sessionStorage、cookie</li><li>获取手机验证码的流程</li><li>如何防止获取验证码接口被刷</li><li>说一个项目中做的工程如何体现你的价值</li><li>团队规模、晋升机制</li></ul>`,15),o=[i];function t(p,c,r,h,d,u){return l(),s("div",null,o)}const b=a(e,[["render",t]]);export{C as __pageData,b as default};
