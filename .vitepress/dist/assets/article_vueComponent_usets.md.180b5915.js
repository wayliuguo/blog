import{_ as s,o as a,c as n,U as e}from"./chunks/framework.9adb0f96.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"article/vueComponent/usets.md","filePath":"article/vueComponent/usets.md","lastUpdated":1692955225000}'),p={name:"article/vueComponent/usets.md"},l=e(`<h2 id="props-类型标注" tabindex="-1">props 类型标注 <a class="header-anchor" href="#props-类型标注" aria-label="Permalink to &quot;props 类型标注&quot;">​</a></h2><p><strong>类型定义</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">type LoadingType = &#39;circular&#39; | &#39;spinner&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">// 指定 props 类型</span></span>
<span class="line"><span style="color:#A6ACCD;">const buttonProps = {</span></span>
<span class="line"><span style="color:#A6ACCD;">    loading: Boolean,</span></span>
<span class="line"><span style="color:#A6ACCD;">    loadingSize: [Number, String],</span></span>
<span class="line"><span style="color:#A6ACCD;">    iconPosition: {</span></span>
<span class="line"><span style="color:#A6ACCD;">        type: ×××</span></span>
<span class="line"><span style="color:#A6ACCD;">        requried: true,</span></span>
<span class="line"><span style="color:#A6ACCD;">        default: ×××</span></span>
<span class="line"><span style="color:#A6ACCD;">    },</span></span>
<span class="line"><span style="color:#A6ACCD;">    loadingType: String as PropType&lt;LoadingType&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">// 提取props类型给到外部使用</span></span>
<span class="line"><span style="color:#A6ACCD;">export type ButtonProps = ExtractPropTypes&lt;typeof buttonProps&gt;</span></span></code></pre></div><p><code>PropType&lt;T&gt;</code></p><ul><li>用于在用运行时 <code>props</code> 声明时给一个 <code>prop</code> 标注更复杂的类型定义</li><li>指定了其是 <code>String</code> 类型 且只能是<code>&#39;circular&#39; | &#39;spinner&#39;</code></li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">loadingType: String as PropType&lt;LoadingType&gt;</span></span></code></pre></div><p><code>ExtractPropTypes&lt;T&gt;</code></p><ul><li>从运行时的 props 选项对象中提取 props 类型</li><li>提取到的类型是面向内部的，也就是说组件接收到的是解析后的 props</li></ul><p><strong>tsx 中使用</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">export default defineComponent({</span></span>
<span class="line"><span style="color:#A6ACCD;">    props: buttonProps</span></span>
<span class="line"><span style="color:#A6ACCD;">})</span></span></code></pre></div><p><strong>SFC 中使用</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">const props = defineProps(buttonProps)</span></span></code></pre></div><h2 id="emit-类型标注" tabindex="-1">emit 类型标注 <a class="header-anchor" href="#emit-类型标注" aria-label="Permalink to &quot;emit 类型标注&quot;">​</a></h2><p><strong>SFC 中使用</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">const buttonEmits = {</span></span>
<span class="line"><span style="color:#A6ACCD;">  click: (e: MouseEvent) =&gt; e instanceof MouseEvent</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">const emit = defineEmits(buttonEmits)</span></span></code></pre></div><p><strong>tsx 中定义</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">export default defineComponent({</span></span>
<span class="line"><span style="color:#A6ACCD;">    emits: [&#39;click&#39;]</span></span>
<span class="line"><span style="color:#A6ACCD;">})</span></span></code></pre></div><h2 id="ref-类型标注" tabindex="-1">ref 类型标注 <a class="header-anchor" href="#ref-类型标注" aria-label="Permalink to &quot;ref 类型标注&quot;">​</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">let width: Ref&lt;number&gt; = ref(20)</span></span>
<span class="line"><span style="color:#A6ACCD;">let width = ref&lt;string | number&gt;(20)</span></span></code></pre></div><h2 id="reactive-类型标注" tabindex="-1">reactive 类型标注 <a class="header-anchor" href="#reactive-类型标注" aria-label="Permalink to &quot;reactive 类型标注&quot;">​</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">interface Book {</span></span>
<span class="line"><span style="color:#A6ACCD;">  title: string</span></span>
<span class="line"><span style="color:#A6ACCD;">  year?: number</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">const book: Book = reactive({ title: &#39;Vue 3 指引&#39; })</span></span></code></pre></div><h2 id="computed-类型标注" tabindex="-1">computed 类型标注 <a class="header-anchor" href="#computed-类型标注" aria-label="Permalink to &quot;computed 类型标注&quot;">​</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">const double = computed&lt;number&gt;(() =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">  // 若返回值不是 number 类型则会报错</span></span>
<span class="line"><span style="color:#A6ACCD;">})</span></span></code></pre></div>`,23),t=[l];function o(c,i,r,d,C,u){return a(),n("div",null,t)}const g=s(p,[["render",o]]);export{y as __pageData,g as default};
