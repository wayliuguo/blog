{"version":3,"file":"reactivity.cjs.js","sources":["../../shared/src/index.ts","../src/effect.ts","../src/baseHandlers.ts","../src/reactive.ts","../src/ref.ts"],"sourcesContent":["export const isObject = (value: unknown): boolean =>\r\n  typeof value === \"object\" && value !== null;\r\n\r\nexport const extend = Object.assign;\r\n\r\nexport const isArray = Array.isArray;\r\n\r\nexport const isFunction = (value) => typeof value === \"function\";\r\n\r\nexport const isNumber = (value) => typeof value === \"number\";\r\n\r\nexport const isString = (value) => typeof value === \"string\";\r\n\r\nexport const isIntegerKey = (key) => `${parseInt(key)}` === key;\r\n\r\n// 判断对象是否存在此属性\r\nexport const hasOwn = (target, key) => Object.prototype.hasOwnProperty.call(target, key)\r\n\r\nexport const hasChanged = (oldValue, value) => oldValue !== value","import { isArray, isIntegerKey } from \"@vue/shared\";\r\nimport { TrackOpTypes, TriggerOrTypes } from \"./operators\";\r\n\r\nexport function effect(fn: Function, options: any = {}) {\r\n  // 需要让这个 effect 变成响应式的 effect，实现数据变化重新执行\r\n  const effect = createReactiveEffect(fn, options);\r\n\r\n  // 响应式的effect默认会先执行一次，如果是lazy不执行\r\n  if (!options.lazy) {\r\n    effect();\r\n  }\r\n\r\n  return effect;\r\n}\r\n\r\n// 全局 effect，用于存储当前的 effect，供 track 获取\r\nlet activeEffect;\r\n/**\r\n * effect 栈，用于effect 嵌套中获得正确的effect上下文\r\n * 保证每个属性收集的effect是正确的\r\n * effect(() => {\r\n *  state.name // effect1\r\n *  effect(() => {state.age}) //effect2\r\n *  state.sex // effect1\r\n * })\r\n */\r\nconst effectStack = [];\r\n// effect 唯一标识,用于区分 effect\r\nlet uid = 0;\r\nfunction createReactiveEffect(fn, options) {\r\n  const effect = function reactiveEffect() {\r\n    // 保证此effect没有加入到effectStack 中，防止死循环\r\n    // 如 effect(() => state.age++) 如果没有这个判断，状态改变后重新执行会死循环\r\n    if (!effectStack.includes(effect)) {\r\n      try {\r\n        effectStack.push(effect);\r\n        activeEffect = effect;\r\n        // 函数执行时会执行对应的 getter 方法，这个时候进行关联\r\n        // baseHanlers.ts => createGetter(if (!isReadonly)) 分支\r\n        return fn();\r\n      } finally {\r\n        effectStack.pop();\r\n        activeEffect = effectStack[effectStack.length - 1];\r\n      }\r\n    }\r\n  };\r\n  // 唯一标识\r\n  effect.id = uid++;\r\n  // 用于标识这个是响应式effect\r\n  effect._isEffect = true;\r\n  // 记录effect对应的函数\r\n  effect.raw = fn;\r\n  // 记录选项\r\n  effect.options = options;\r\n  return effect;\r\n}\r\n\r\n// 收集effect依赖\r\nconst targetMap = new WeakMap();\r\n\r\n/**\r\n * 让某个对象中的属性收集对应的effect函数\r\n * @param target 目标对象\r\n * @param type 类型\r\n * @param key 属性\r\n */\r\nexport function track(target: object, type: TrackOpTypes, key: string) {\r\n  // 构建对应的weakMap(key: target value: map(key: key(依赖属性名), value: set[effect1,...]))\r\n  // 没在effect中使用的属性不用收集\r\n  if (activeEffect === undefined) return;\r\n  // 从 targetMap 获取 target 对应的值，如果没有则创建并赋值给 depsMap，其值是一个map，用于存放key => set[effect]\r\n  let depsMap = targetMap.get(target);\r\n  if (!depsMap) {\r\n    targetMap.set(target, (depsMap = new Map()));\r\n  }\r\n  // 从 depsMap 获取 key 对应的值，如果没有则创建并赋值给 dep，其值是一个set数组，用于存放effect数组\r\n  let dep = depsMap.get(key);\r\n  if (!dep) {\r\n    depsMap.set(key, (dep = new Set()));\r\n  }\r\n  // 避免添加重复的\r\n  if (!dep.has(activeEffect)) {\r\n    dep.add(activeEffect);\r\n  }\r\n  console.log(targetMap);\r\n}\r\n\r\nexport function trigger(target, type?, key?, newValue?, oldValue?) {\r\n  console.log(target, type, key, newValue, oldValue);\r\n  // 如果这个属性没有收集过 effect 不需要做任何操作\r\n  const depsMap = targetMap.get(target);\r\n  if (!depsMap) return;\r\n\r\n  // 将所有的effect全部暂存到一个新的集合中，最终一起执行\r\n  const effects: Set<Function> = new Set()\r\n  // 添加 effect\r\n  const add = effectsToAdd => {\r\n    if (effectsToAdd) {\r\n      effectsToAdd.forEach(effect => effects.add(effect))\r\n    }\r\n  }\r\n\r\n  // 1.判断是否修改数组的长度，修改数组的长度影响较大\r\n  if (key === 'length' && isArray(target)) {\r\n    // 如果对应的长度有依赖收集，则需要更新\r\n    depsMap.forEach((dep, key) => {\r\n      console.log(depsMap, dep, key)\r\n      // 如果更改的长度小于收集的索引，那么这个索引也需要触发effect重新更新（state.arr.length = 1）\r\n      // 如果不是直接更改length，如push的这种，key已经是新增的下标了\r\n      if (key === 'length' || key > newValue) {\r\n        add(dep)\r\n      }\r\n    })\r\n  } else {\r\n    // 2.如果不是修改数组的长度\r\n    if (key !== undefined) {\r\n      add(depsMap.get(key))\r\n    }\r\n    // 如果是修改数组中某一个索引\r\n    switch (type) {\r\n      case TriggerOrTypes.ADD:\r\n        if (isArray(target) && isIntegerKey(key)) {\r\n          add(depsMap.get('length'))\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n  // 执行所有effect\r\n  effects.forEach(effect => effect())\r\n}\r\n","import {\r\n  extend,\r\n  hasChanged,\r\n  hasOwn,\r\n  isArray,\r\n  isIntegerKey,\r\n  isObject,\r\n} from \"@vue/shared\";\r\nimport { reactive, readonly } from \"./reactive\";\r\nimport { track, trigger } from \"./effect\";\r\nimport { TrackOpTypes, TriggerOrTypes } from \"./operators\";\r\n\r\n// Relect 的优点\r\n// 1.后续Object的方法属性会往Reflect迁移\r\n// 2.如果用target[key] = value 方式设置值可能会失败，并不会报异常，也没有返回值标识\r\n// 2.Reflect 方法具备返回值,判断是否设置成功\r\n\r\n// 是否是仅读的，是的话set时会报异常\r\n// 是否是深度的\r\nfunction createGetter(isReadonly: boolean = false, shallow: boolean = false) {\r\n  // target: 目标对象 key: 属性名 receiver: Proxy\r\n  return function get(target, key, receiver) {\r\n    // 使用 reflect获取结果\r\n    // target: 需要取值的目标对象 key: 需要获取的值的键值 receiver: 如果target对象中指定了getter，receiver则为getter调用时的this值\r\n    // 相当于 target[key]\r\n    const res = Reflect.get(target, key, receiver);\r\n\r\n    // 如果是非仅读的，进行依赖收集，等会数据变化后更新对应视图\r\n    if (!isReadonly) {\r\n      console.log(\"执行 effect 时会取值，收集 effect\");\r\n      // 调用 track 收集依赖\r\n      track(target, TrackOpTypes.GET, key);\r\n    }\r\n\r\n    // 如果是浅层的\r\n    if (shallow) return res;\r\n    // vue2是初始化就直接递归代理，vue3是取值时会进行代理（懒代理）\r\n    if (isObject(res)) {\r\n      return isReadonly ? readonly(res) : reactive(res);\r\n    }\r\n\r\n    return res;\r\n  };\r\n}\r\n\r\nfunction createSetter(isShallow: boolean = false) {\r\n  // target: 目标对象 key: 属性名 value: 新属性值 receiver: Proxy\r\n  return function set(target, key, value, receiver) {\r\n    // 当数据更新时，通知对应属性的 effect 重新执行\r\n    // 我们要区分是新增的还是修改的\r\n    // vue2里无法监控更改索引，无法监控数组的长度\r\n    // 获取未变更的值\r\n    const oldValue = target[key];\r\n    // 判断是否存在这个属性\r\n    let hadKey =\r\n      isArray(target) && isIntegerKey(key)\r\n        ? Number(key) < target.length\r\n        : hasOwn(target, key);\r\n\r\n    // target: 需要取值的目标对象 key: 需要获取的值的键值 value: 设置的值 receiver: 如果target对象中指定了getter，receiver则为getter调用时的this值\r\n    const result = Reflect.set(target, key, value, receiver);\r\n\r\n    if (!hadKey) {\r\n      // 新增\r\n      trigger(target, TriggerOrTypes.ADD, key, value);\r\n    } else if (hasChanged(oldValue, value)) {\r\n      // 修改\r\n      trigger(target, TriggerOrTypes.SET, key, value, oldValue);\r\n    }\r\n\r\n    return result;\r\n  };\r\n}\r\n\r\n// 生成 getter\r\nconst get = createGetter();\r\nconst shallowGet = createGetter(false, true);\r\nconst readonlyGet = createGetter(true);\r\nconst shallowReadonlyGet = createGetter(true, true);\r\n\r\n// 生成 setter\r\nconst set = createSetter();\r\nconst shallowSet = createSetter(true);\r\n\r\n// readonly Setter\r\nconst readonlyObj = {\r\n  set: (target, key) => {\r\n    console.warn(`set ${target} on key ${key} failed`);\r\n  },\r\n};\r\n\r\nexport const mutableHandlers = {\r\n  get,\r\n  set,\r\n};\r\nexport const shallowReactiveHandlers = {\r\n  get: shallowGet,\r\n  set: shallowSet,\r\n};\r\nexport const readonlyHandlers = extend(\r\n  {\r\n    get: readonlyGet,\r\n  },\r\n  readonlyObj\r\n);\r\nexport const shallowReadonlyHandlers = extend(\r\n  {\r\n    get: shallowReadonlyGet,\r\n  },\r\n  readonlyObj\r\n);\r\n","import { isObject } from \"@vue/shared\";\r\nimport {\r\n  mutableHandlers,\r\n  readonlyHandlers,\r\n  shallowReactiveHandlers,\r\n  shallowReadonlyHandlers,\r\n} from \"./baseHandlers\";\r\n\r\nexport function reactive(target) {\r\n  return createReactiveObject(target, false, mutableHandlers);\r\n}\r\n\r\nexport function shallowReactive(target) {\r\n  return createReactiveObject(target, false, shallowReactiveHandlers);\r\n}\r\n\r\nexport function readonly(target) {\r\n  return createReactiveObject(target, true, readonlyHandlers);\r\n}\r\n\r\nexport function shallowReadonly(target) {\r\n  return createReactiveObject(target, true, shallowReadonlyHandlers);\r\n}\r\n\r\n// 代理缓存\r\n// WeakMap 会自动垃圾回收，不会造成内存泄漏，存储的key只能是对象\r\nconst reactiveMap = new WeakMap();\r\nconst readonlyMap = new WeakMap();\r\n\r\n/**\r\n * 柯里化 new Proxy() 最核心的需要拦截\r\n * @param target 目标对象\r\n * @param isReadonly boolean  是不是仅读\r\n * @param baseHandlers\r\n */\r\nexport function createReactiveObject(\r\n  target: object,\r\n  isReadonly: boolean,\r\n  baseHandlers: object\r\n) {\r\n  // 如果目标不是对象，没法拦截了 reactive 这个 api 只能拦截对象\r\n  if (!isObject(target)) return target;\r\n\r\n  // 使用 proxy 代理, 将要代理的对象合对应的结果进行缓存\r\n  // 如果某个对象已经代理过了，就不要再次代理\r\n  // 可能一个对象 被代理是深度的 又被仅读代理了\r\n  const proxyMap = isReadonly ? readonlyMap : reactiveMap;\r\n  const existProxy = proxyMap.get(target);\r\n  // 如果已经被代理了直接返回即可\r\n  if (existProxy) return existProxy;\r\n  const proxy = new Proxy(target, baseHandlers);\r\n  proxyMap.set(target, proxy);\r\n\r\n  return proxy;\r\n}\r\n","import { hasChanged, isArray, isObject } from \"@vue/shared\";\r\nimport { track, trigger } from \"./effect\";\r\nimport { TrackOpTypes, TriggerOrTypes } from \"./operators\";\r\nimport { reactive } from \"./reactive\";\r\n\r\n// value 是一个普通类型或者对象\r\nexport function ref(value) {\r\n  // 将普通类型变成一个对象\r\n  return createRef(value);\r\n}\r\n\r\nexport function shallowRef(value) {\r\n  return createRef(value, true);\r\n}\r\n\r\nconst convert = (val) => (isObject(val) ? reactive(val) : val);\r\n\r\nclass RefImpl {\r\n  public _value;\r\n  // 参数的实例添加_v-isRef 表示是一个ref属性\r\n  public _v_isRef = true;\r\n  // 参数中前面增加修饰符 标识此属性放到了实例上\r\n  constructor(public rawValue, public shallow) {\r\n    // 如果是深度的，需要把里面的都变成响应式（使用reactive转换）\r\n    this._value = shallow ? rawValue : convert(rawValue);\r\n  }\r\n\r\n  // 类的属性访问器(编译后会自动转成defineProperty)\r\n  get value() {\r\n    track(this, TrackOpTypes.GET, \"value\");\r\n    return this._value;\r\n  }\r\n  set value(newValue) {\r\n    // 判断老值和新值是否有变化\r\n    if (hasChanged(newValue, this.rawValue)) {\r\n      this.rawValue = newValue;\r\n      this._value = this.shallow ? newValue : convert(newValue);\r\n      trigger(this, TriggerOrTypes.SET, \"value\", newValue);\r\n    }\r\n  }\r\n}\r\n\r\nfunction createRef(rawValue, shallow: boolean = false) {\r\n  return new RefImpl(rawValue, shallow);\r\n}\r\n\r\n// toRef toRefs 只是做了一层代理\r\nclass ObjectRefImpl {\r\n  public __v_isRef = true;\r\n  constructor(public target, public key) {}\r\n  get value() {\r\n    return this.target[this.key];\r\n  }\r\n  set value(newValue) {\r\n    this.target[this.key] = newValue;\r\n  }\r\n}\r\n\r\n// 将对象的一个属性变成ref类型\r\nexport function toRef(target, key) {\r\n  return new ObjectRefImpl(target, key);\r\n}\r\n\r\n// object 可能传递的是一个数组或者对象\r\nexport function toRefs(object) {\r\n  const ret = isArray(object) ? new Array(object.length) : {};\r\n  for (let key in object) {\r\n    ret[key] = toRef(object, key);\r\n  }\r\n  return ret;\r\n}\r\n"],"names":[],"mappings":";;;;AAAO,MAAM,QAAQ,GAAG,CAAC,KAAc,KACrC,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,IAAI,CAAC;AAEvC,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;AAE7B,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;AAQ9B,MAAM,YAAY,GAAG,CAAC,GAAG,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC;AAEhE;AACO,MAAM,MAAM,GAAG,CAAC,MAAM,EAAE,GAAG,KAAK,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAA;AAEjF,MAAM,UAAU,GAAG,CAAC,QAAQ,EAAE,KAAK,KAAK,QAAQ,KAAK,KAAK;;SCfjD,MAAM,CAAC,EAAY,EAAE,UAAe,EAAE;;IAEpD,MAAM,MAAM,GAAG,oBAAoB,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;;IAGjD,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;QACjB,MAAM,EAAE,CAAC;KACV;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAED;AACA,IAAI,YAAY,CAAC;AACjB;;;;;;;;;AASA,MAAM,WAAW,GAAG,EAAE,CAAC;AACvB;AACA,IAAI,GAAG,GAAG,CAAC,CAAC;AACZ,SAAS,oBAAoB,CAAC,EAAE,EAAE,OAAO;IACvC,MAAM,MAAM,GAAG,SAAS,cAAc;;;QAGpC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;YACjC,IAAI;gBACF,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBACzB,YAAY,GAAG,MAAM,CAAC;;;gBAGtB,OAAO,EAAE,EAAE,CAAC;aACb;oBAAS;gBACR,WAAW,CAAC,GAAG,EAAE,CAAC;gBAClB,YAAY,GAAG,WAAW,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;aACpD;SACF;KACF,CAAC;;IAEF,MAAM,CAAC,EAAE,GAAG,GAAG,EAAE,CAAC;;IAElB,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC;;IAExB,MAAM,CAAC,GAAG,GAAG,EAAE,CAAC;;IAEhB,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,OAAO,MAAM,CAAC;AAChB,CAAC;AAED;AACA,MAAM,SAAS,GAAG,IAAI,OAAO,EAAE,CAAC;AAEhC;;;;;;SAMgB,KAAK,CAAC,MAAc,EAAE,IAAkB,EAAE,GAAW;;;IAGnE,IAAI,YAAY,KAAK,SAAS;QAAE,OAAO;;IAEvC,IAAI,OAAO,GAAG,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACpC,IAAI,CAAC,OAAO,EAAE;QACZ,SAAS,CAAC,GAAG,CAAC,MAAM,GAAG,OAAO,GAAG,IAAI,GAAG,EAAE,EAAE,CAAC;KAC9C;;IAED,IAAI,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC3B,IAAI,CAAC,GAAG,EAAE;QACR,OAAO,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,EAAE,EAAE,CAAC;KACrC;;IAED,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE;QAC1B,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;KACvB;IACD,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;AACzB,CAAC;SAEe,OAAO,CAAC,MAAM,EAAE,IAAK,EAAE,GAAI,EAAE,QAAS,EAAE,QAAS;IAC/D,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;;IAEnD,MAAM,OAAO,GAAG,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACtC,IAAI,CAAC,OAAO;QAAE,OAAO;;IAGrB,MAAM,OAAO,GAAkB,IAAI,GAAG,EAAE,CAAA;;IAExC,MAAM,GAAG,GAAG,YAAY;QACtB,IAAI,YAAY,EAAE;YAChB,YAAY,CAAC,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAA;SACpD;KACF,CAAA;;IAGD,IAAI,GAAG,KAAK,QAAQ,IAAI,OAAO,CAAC,MAAM,CAAC,EAAE;;QAEvC,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG;YACvB,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,EAAE,GAAG,CAAC,CAAA;;;YAG9B,IAAI,GAAG,KAAK,QAAQ,IAAI,GAAG,GAAG,QAAQ,EAAE;gBACtC,GAAG,CAAC,GAAG,CAAC,CAAA;aACT;SACF,CAAC,CAAA;KACH;SAAM;;QAEL,IAAI,GAAG,KAAK,SAAS,EAAE;YACrB,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAA;SACtB;;QAED,QAAQ,IAAI;YACV;gBACE,IAAI,OAAO,CAAC,MAAM,CAAC,IAAI,YAAY,CAAC,GAAG,CAAC,EAAE;oBACxC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAA;iBAC3B;gBACD,MAAM;SAGT;KACF;;IAED,OAAO,CAAC,OAAO,CAAC,MAAM,IAAI,MAAM,EAAE,CAAC,CAAA;AACrC;;ACvHA;AACA;AACA;AACA;AAEA;AACA;AACA,SAAS,YAAY,CAAC,aAAsB,KAAK,EAAE,UAAmB,KAAK;;IAEzE,OAAO,SAAS,GAAG,CAAC,MAAM,EAAE,GAAG,EAAE,QAAQ;;;;QAIvC,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;;QAG/C,IAAI,CAAC,UAAU,EAAE;YACf,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;;YAExC,KAAK,CAAC,MAAM,eAAoB,GAAG,CAAC,CAAC;SACtC;;QAGD,IAAI,OAAO;YAAE,OAAO,GAAG,CAAC;;QAExB,IAAI,QAAQ,CAAC,GAAG,CAAC,EAAE;YACjB,OAAO,UAAU,GAAG,QAAQ,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;SACnD;QAED,OAAO,GAAG,CAAC;KACZ,CAAC;AACJ,CAAC;AAED,SAAS,YAAY,CAAC,YAAqB,KAAK;;IAE9C,OAAO,SAAS,GAAG,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,QAAQ;;;;;QAK9C,MAAM,QAAQ,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;;QAE7B,IAAI,MAAM,GACR,OAAO,CAAC,MAAM,CAAC,IAAI,YAAY,CAAC,GAAG,CAAC;cAChC,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,MAAM;cAC3B,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;;QAG1B,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;QAEzD,IAAI,CAAC,MAAM,EAAE;;YAEX,OAAO,CAAC,MAAM,eAAsB,GAAG,EAAE,KAAK,CAAC,CAAC;SACjD;aAAM,IAAI,UAAU,CAAC,QAAQ,EAAE,KAAK,CAAC,EAAE;;YAEtC,OAAO,CAAC,MAAM,eAAsB,GAAG,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;SAC3D;QAED,OAAO,MAAM,CAAC;KACf,CAAC;AACJ,CAAC;AAED;AACA,MAAM,GAAG,GAAG,YAAY,EAAE,CAAC;AAC3B,MAAM,UAAU,GAAG,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;AAC7C,MAAM,WAAW,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC;AACvC,MAAM,kBAAkB,GAAG,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAEpD;AACA,MAAM,GAAG,GAAG,YAAY,EAAE,CAAC;AAC3B,MAAM,UAAU,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC;AAEtC;AACA,MAAM,WAAW,GAAG;IAClB,GAAG,EAAE,CAAC,MAAM,EAAE,GAAG;QACf,OAAO,CAAC,IAAI,CAAC,OAAO,MAAM,WAAW,GAAG,SAAS,CAAC,CAAC;KACpD;CACF,CAAC;AAEK,MAAM,eAAe,GAAG;IAC7B,GAAG;IACH,GAAG;CACJ,CAAC;AACK,MAAM,uBAAuB,GAAG;IACrC,GAAG,EAAE,UAAU;IACf,GAAG,EAAE,UAAU;CAChB,CAAC;AACK,MAAM,gBAAgB,GAAG,MAAM,CACpC;IACE,GAAG,EAAE,WAAW;CACjB,EACD,WAAW,CACZ,CAAC;AACK,MAAM,uBAAuB,GAAG,MAAM,CAC3C;IACE,GAAG,EAAE,kBAAkB;CACxB,EACD,WAAW,CACZ;;SCtGe,QAAQ,CAAC,MAAM;IAC7B,OAAO,oBAAoB,CAAC,MAAM,EAAE,KAAK,EAAE,eAAe,CAAC,CAAC;AAC9D,CAAC;SAEe,eAAe,CAAC,MAAM;IACpC,OAAO,oBAAoB,CAAC,MAAM,EAAE,KAAK,EAAE,uBAAuB,CAAC,CAAC;AACtE,CAAC;SAEe,QAAQ,CAAC,MAAM;IAC7B,OAAO,oBAAoB,CAAC,MAAM,EAAE,IAAI,EAAE,gBAAgB,CAAC,CAAC;AAC9D,CAAC;SAEe,eAAe,CAAC,MAAM;IACpC,OAAO,oBAAoB,CAAC,MAAM,EAAE,IAAI,EAAE,uBAAuB,CAAC,CAAC;AACrE,CAAC;AAED;AACA;AACA,MAAM,WAAW,GAAG,IAAI,OAAO,EAAE,CAAC;AAClC,MAAM,WAAW,GAAG,IAAI,OAAO,EAAE,CAAC;AAElC;;;;;;SAMgB,oBAAoB,CAClC,MAAc,EACd,UAAmB,EACnB,YAAoB;;IAGpB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;QAAE,OAAO,MAAM,CAAC;;;;IAKrC,MAAM,QAAQ,GAAG,UAAU,GAAG,WAAW,GAAG,WAAW,CAAC;IACxD,MAAM,UAAU,GAAG,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;;IAExC,IAAI,UAAU;QAAE,OAAO,UAAU,CAAC;IAClC,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;IAC9C,QAAQ,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IAE5B,OAAO,KAAK,CAAC;AACf;;ACjDA;SACgB,GAAG,CAAC,KAAK;;IAEvB,OAAO,SAAS,CAAC,KAAK,CAAC,CAAC;AAC1B,CAAC;SAEe,UAAU,CAAC,KAAK;IAC9B,OAAO,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;AAChC,CAAC;AAED,MAAM,OAAO,GAAG,CAAC,GAAG,MAAM,QAAQ,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;AAE/D,MAAM,OAAO;;IAKX,YAAmB,QAAQ,EAAS,OAAO;QAAxB,aAAQ,GAAR,QAAQ,CAAA;QAAS,YAAO,GAAP,OAAO,CAAA;;QAFpC,aAAQ,GAAG,IAAI,CAAC;;QAIrB,IAAI,CAAC,MAAM,GAAG,OAAO,GAAG,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;KACtD;;IAGD,IAAI,KAAK;QACP,KAAK,CAAC,IAAI,eAAoB,OAAO,CAAC,CAAC;QACvC,OAAO,IAAI,CAAC,MAAM,CAAC;KACpB;IACD,IAAI,KAAK,CAAC,QAAQ;;QAEhB,IAAI,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE;YACvC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;YACzB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,GAAG,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC1D,OAAO,CAAC,IAAI,eAAsB,OAAO,EAAE,QAAQ,CAAC,CAAC;SACtD;KACF;CACF;AAED,SAAS,SAAS,CAAC,QAAQ,EAAE,UAAmB,KAAK;IACnD,OAAO,IAAI,OAAO,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;AACxC,CAAC;AAED;AACA,MAAM,aAAa;IAEjB,YAAmB,MAAM,EAAS,GAAG;QAAlB,WAAM,GAAN,MAAM,CAAA;QAAS,QAAG,GAAH,GAAG,CAAA;QAD9B,cAAS,GAAG,IAAI,CAAC;KACiB;IACzC,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAC9B;IACD,IAAI,KAAK,CAAC,QAAQ;QAChB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC;KAClC;CACF;AAED;SACgB,KAAK,CAAC,MAAM,EAAE,GAAG;IAC/B,OAAO,IAAI,aAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;AACxC,CAAC;AAED;SACgB,MAAM,CAAC,MAAM;IAC3B,MAAM,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;IAC5D,KAAK,IAAI,GAAG,IAAI,MAAM,EAAE;QACtB,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;KAC/B;IACD,OAAO,GAAG,CAAC;AACb;;;;;;;;;;;;"}